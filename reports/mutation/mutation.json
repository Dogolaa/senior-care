{"files":{"src/api/controllers/address.controller.ts":{"language":"typescript","mutants":[{"id":"0","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":42},"start":{"column":66,"line":27}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":49},"start":{"column":39,"line":45}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":55},"start":{"column":68,"line":52}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":62},"start":{"column":62,"line":58}}},{"id":"4","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":83},"start":{"column":19,"line":68}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateAddressCommand } from 'src/application/commands/address/createAddress.command';\nimport { DeleteAddressCommand } from 'src/application/commands/address/deleteAddress.command';\nimport { UpdateAddressCommand } from 'src/application/commands/address/updateAddress.command';\nimport { CreateAddressDTO } from 'src/application/dtos/address/createAddress.dto';\nimport { UpdateAddressDTO } from 'src/application/dtos/address/updateAddress.dto';\nimport { GetAllAddressQuery } from 'src/application/query/address/getAllAddress.query';\nimport { ListSpecificAddressQuery } from 'src/application/query/address/listSpecificAddress.query';\n\n@Controller('address')\nexport class AddressController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Post('/create')\n  async createUser(@Body() body: CreateAddressDTO): Promise<any> {\n    const { cep, country, state, city, district, street, number, complement } =\n      body;\n\n    const command = new CreateAddressCommand(\n      cep,\n      country,\n      state,\n      city,\n      district,\n      street,\n      number,\n      complement,\n    );\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  async getAllAddress(): Promise<any> {\n    const query = new GetAllAddressQuery();\n\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:id')\n  async listSpecificAddress(@Param('id') id: string): Promise<any> {\n    const query = new ListSpecificAddressQuery(id);\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('delete/:id')\n  async deleteAddress(@Param('id') id: string): Promise<any> {\n    const command = new DeleteAddressCommand(id);\n\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('/:id')\n  async updateAddress(\n    @Param('id') id: string,\n    @Body() body: UpdateAddressDTO,\n  ): Promise<any> {\n    const { cep, country, state, city, district, street, number, complement } =\n      body;\n    const command = new UpdateAddressCommand(\n      id,\n      cep,\n      country,\n      state,\n      city,\n      district,\n      street,\n      number,\n      complement,\n    );\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/api/controllers/doctor.controller.ts":{"language":"typescript","mutants":[{"id":"5","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":33},"start":{"column":67,"line":27}}},{"id":"6","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":39},"start":{"column":39,"line":36}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":45},"start":{"column":67,"line":42}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":51},"start":{"column":61,"line":48}}},{"id":"9","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":61},"start":{"column":19,"line":57}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateDoctorCommand } from 'src/application/commands/doctor/createDoctor.command';\nimport { DeleteDoctorCommand } from 'src/application/commands/doctor/deleteDoctor.command';\nimport { UpdateDoctorCommand } from 'src/application/commands/doctor/updateDoctor.command';\nimport { CreateDoctorDTO } from 'src/application/dtos/doctor/createDoctor.dto';\nimport { UpdateDoctorDTO } from 'src/application/dtos/doctor/updateDoctor.dto';\nimport { GetAllDoctorsQuery } from 'src/application/query/doctor/getAllDoctors.query';\nimport { ListSpecificDoctorQuery } from 'src/application/query/doctor/listSpecificDoctor.query';\n\n@Controller('doctor')\nexport class DoctorController {\n  constructor(\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus,\n  ) {}\n\n  @Post('/create')\n  async createDoctor(@Body() body: CreateDoctorDTO): Promise<any> {\n    const { userId, crm, specialization, shift } = body;\n\n    const command = new CreateDoctorCommand(userId, crm, specialization, shift);\n\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  async getAllDoctors(): Promise<any> {\n    const query = new GetAllDoctorsQuery();\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:id')\n  async listSpecificDoctor(@Param('id') id: string): Promise<any> {\n    const query = new ListSpecificDoctorQuery(id);\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('delete/:id')\n  async deleteDoctor(@Param('id') id: string): Promise<any> {\n    const command = new DeleteDoctorCommand(id);\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('update/:id')\n  async updateDoctor(\n    @Param('id') id: string,\n    @Body() body: UpdateDoctorDTO,\n  ): Promise<any> {\n    const { crm, specialization, shift } = body;\n    const command = new UpdateDoctorCommand(id, crm, specialization, shift);\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/api/controllers/nurse.controller.ts":{"language":"typescript","mutants":[{"id":"10","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":38},"start":{"column":65,"line":27}}},{"id":"11","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":44},"start":{"column":38,"line":41}}},{"id":"12","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":50},"start":{"column":66,"line":47}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":56},"start":{"column":60,"line":53}}},{"id":"14","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":66},"start":{"column":19,"line":62}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateNurseCommand } from 'src/application/commands/nurse/createNurse.command';\nimport { DeleteNurseCommand } from 'src/application/commands/nurse/deleteNurse.command';\nimport { UpdateNurseCommand } from 'src/application/commands/nurse/updateNurse.command';\nimport { CreateNurseDTO } from 'src/application/dtos/nurse/createNurse.dto';\nimport { UpdateNurseDTO } from 'src/application/dtos/nurse/updateNurse.dto';\nimport { GetAllNursesQuery } from 'src/application/query/nurse/getAllNurses.query';\nimport { ListSpecificNurseQuery } from 'src/application/query/nurse/listSpecificNurse.query';\n\n@Controller('nurse')\nexport class NurseController {\n  constructor(\n    private readonly queryBus: QueryBus,\n    private readonly commandBus: CommandBus,\n  ) {}\n\n  @Post('/create')\n  async createNurse(@Body() body: CreateNurseDTO): Promise<any> {\n    const { userId, coren, specialization, shift } = body;\n\n    const command = new CreateNurseCommand(\n      userId,\n      coren,\n      specialization,\n      shift,\n    );\n\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  async getAllNurses(): Promise<any> {\n    const query = new GetAllNursesQuery();\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:id')\n  async listSpecificNurse(@Param('id') id: string): Promise<any> {\n    const query = new ListSpecificNurseQuery(id);\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('delete/:id')\n  async deleteNurse(@Param('id') id: string): Promise<any> {\n    const command = new DeleteNurseCommand(id);\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('update/:id')\n  async updateNurse(\n    @Param('id') id: string,\n    @Body() body: UpdateNurseDTO,\n  ): Promise<any> {\n    const { coren, specialization, shift } = body;\n    const command = new UpdateNurseCommand(id, coren, specialization, shift);\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/api/controllers/permissions.controller.ts":{"language":"typescript","mutants":[{"id":"15","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":32},"start":{"column":75,"line":27}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":39},"start":{"column":43,"line":35}}},{"id":"17","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":46},"start":{"column":71,"line":42}}},{"id":"18","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":53},"start":{"column":65,"line":49}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":63},"start":{"column":19,"line":59}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreatePermissionCommand } from 'src/application/commands/permissions/createPermission.command';\nimport { DeletePermissionCommand } from 'src/application/commands/permissions/deletePermission.command';\nimport { UpdatePermissionCommand } from 'src/application/commands/permissions/updatePermission.command';\nimport { CreatePermissionDTO } from 'src/application/dtos/permissions/createPermission.dto';\nimport { UpdatePermissionDTO } from 'src/application/dtos/permissions/updatePermission.dto';\nimport { GetAllPermissionsQuery } from 'src/application/query/permissions/getAllPermissions.query';\nimport { ListSpecificPermissionQuery } from 'src/application/query/permissions/listSpecificPermission.query';\n\n@Controller('permissions')\nexport class PermissionController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Post('/create')\n  async createPermission(@Body() body: CreatePermissionDTO): Promise<any> {\n    const { permissionName } = body;\n\n    const command = new CreatePermissionCommand(permissionName);\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  async getAllPermissions(): Promise<any> {\n    const query = new GetAllPermissionsQuery();\n\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:id')\n  async listSpecificPermission(@Param('id') id: string): Promise<any> {\n    const query = new ListSpecificPermissionQuery(id);\n\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('delete/:id')\n  async deletePermission(@Param('id') id: string): Promise<any> {\n    const command = new DeletePermissionCommand(id);\n\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('/:id')\n  async updatePermission(\n    @Param('id') id: string,\n    @Body() body: UpdatePermissionDTO,\n  ): Promise<any> {\n    const { permissionName } = body;\n    const command = new UpdatePermissionCommand(id, permissionName);\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/api/controllers/role.controller.ts":{"language":"typescript","mutants":[{"id":"20","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":32},"start":{"column":63,"line":27}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":39},"start":{"column":37,"line":35}}},{"id":"22","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":46},"start":{"column":65,"line":42}}},{"id":"23","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":53},"start":{"column":59,"line":49}}},{"id":"24","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":63},"start":{"column":19,"line":59}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { CreateRoleCommand } from 'src/application/commands/role/createRole.command';\nimport { DeleteRoleCommand } from 'src/application/commands/role/deleteRole.command';\nimport { UpdateRoleCommand } from 'src/application/commands/role/updateRole.command';\nimport { CreateRoleDTO } from 'src/application/dtos/role/createRole.dto';\nimport { UpdateRoleDTO } from 'src/application/dtos/role/updateRole.dto';\nimport { GetAllRolesQuery } from 'src/application/query/role/getAllRoles.query';\nimport { ListSpecificRoleQuery } from 'src/application/query/role/listSpecificRole.query';\n\n@Controller('role')\nexport class RoleController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Post('/create')\n  async createRole(@Body() body: CreateRoleDTO): Promise<any> {\n    const { name } = body;\n\n    const command = new CreateRoleCommand(name);\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  async getAllRoles(): Promise<any> {\n    const query = new GetAllRolesQuery();\n\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:id')\n  async listSpecificUser(@Param('id') id: string): Promise<any> {\n    const query = new ListSpecificRoleQuery(id);\n\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('delete/:id')\n  async deleteRole(@Param('id') id: string): Promise<any> {\n    const command = new DeleteRoleCommand(id);\n\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('/:id')\n  async updateRole(\n    @Param('id') id: string,\n    @Body() body: UpdateRoleDTO,\n  ): Promise<any> {\n    const { name } = body;\n    const command = new UpdateRoleCommand(id, name);\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/api/controllers/user.controller.ts":{"language":"typescript","mutants":[{"id":"25","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":52},"start":{"column":64,"line":40}}},{"id":"26","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":64},"start":{"column":40,"line":61}}},{"id":"27","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":78},"start":{"column":72,"line":75}}},{"id":"28","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":108},"start":{"column":65,"line":105}}},{"id":"29","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":130},"start":{"column":20,"line":127}}}],"source":"import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateUserCommand } from 'src/application/commands/user/createUser.command';\nimport { DeleteUserCommand } from 'src/application/commands/user/deleteUser.command';\nimport { UpdateUserCommand } from 'src/application/commands/user/updateUser.command';\nimport { CreateUserDTO } from 'src/application/dtos/user/createUser.dto';\nimport { UpdateUserDTO } from 'src/application/dtos/user/updateUser.dto';\nimport { GetAllUsersQuery } from 'src/application/query/user/getAllUsers.query';\nimport { ListSpecificUserQuery } from 'src/application/query/user/listSpecificUser.query';\nimport { User } from 'src/domain/entities/user.entity';\n\n@ApiTags('users')\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n  ) {}\n\n  @Post('/create')\n  @ApiOperation({ summary: 'Cria um novo usuário' })\n  @ApiResponse({\n    status: 201,\n    description: 'Usuário criado com sucesso.',\n    type: User,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Parâmetros inválidos ou e-mail/CPF já existente.',\n  })\n  async createUser(@Body() body: CreateUserDTO): Promise<User> {\n    const { name, email, cpf, phone, addressId, password, roleId } = body;\n    const command = new CreateUserCommand(\n      name,\n      email,\n      cpf,\n      phone,\n      addressId,\n      password,\n      roleId,\n    );\n    return await this.commandBus.execute(command);\n  }\n\n  @Get('/')\n  @ApiOperation({ summary: 'Lista todos os usuários' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de usuários retornada com sucesso.',\n    type: [User],\n  })\n  async getAllUsers(): Promise<User[]> {\n    const query = new GetAllUsersQuery();\n    return await this.queryBus.execute(query);\n  }\n\n  @Get('/:email')\n  @ApiOperation({ summary: 'Busca um usuário específico pelo e-mail' })\n  @ApiParam({\n    name: 'email',\n    description: 'E-mail do usuário a ser buscado',\n    type: String,\n  })\n  @ApiResponse({ status: 200, description: 'Usuário encontrado.', type: User })\n  @ApiResponse({ status: 404, description: 'Usuário não encontrado.' })\n  async listSpecificUser(@Param('email') email: string): Promise<User> {\n    const query = new ListSpecificUserQuery(email);\n    return await this.queryBus.execute(query);\n  }\n\n  @Delete('/delete/:email')\n  @ApiOperation({ summary: 'Deleta um usuário pelo e-mail' })\n  @ApiParam({\n    name: 'email',\n    description: 'E-mail do usuário a ser deletado',\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Usuário deletado com sucesso.',\n    schema: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n          example: 'Usuário deletado com sucesso.',\n        },\n        success: {\n          type: 'boolean',\n          example: true,\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 404, description: 'Usuário não encontrado.' })\n  async deleteUser(@Param('email') email: string): Promise<any> {\n    const command = new DeleteUserCommand(email);\n    return await this.commandBus.execute(command);\n  }\n\n  @Patch('/:email')\n  @ApiOperation({ summary: 'Atualiza os dados de um usuário' })\n  @ApiParam({\n    name: 'email',\n    description: 'E-mail do usuário a ser atualizado',\n    type: String,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Usuário atualizado com sucesso.',\n    type: User,\n  })\n  @ApiResponse({ status: 400, description: 'Dados inválidos fornecidos.' })\n  @ApiResponse({ status: 404, description: 'Usuário não encontrado.' })\n  async updateUser(\n    @Param('email') email: string,\n    @Body() body: UpdateUserDTO,\n  ): Promise<User> {\n    const command = new UpdateUserCommand(email, body);\n    return await this.commandBus.execute(command);\n  }\n}\n"},"src/application/commands/address/deleteAddress.command.ts":{"language":"typescript","mutants":[{"id":"30","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsUUID } from 'class-validator';\n\nexport class DeleteAddressCommand {\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/doctor/deleteDoctor.command.ts":{"language":"typescript","mutants":[{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":27,"line":8}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class DeleteDoctorCommand {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/doctor/updateDoctor.command.ts":{"language":"typescript","mutants":[{"id":"32","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":15},"start":{"column":5,"line":13}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class UpdateDoctorCommand {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(\n    id: string,\n    public readonly crm?: string,\n    public readonly specialization?: string,\n    public readonly shift?: string,\n  ) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/nurse/deleteNurse.command.ts":{"language":"typescript","mutants":[{"id":"33","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":27,"line":8}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class DeleteNurseCommand {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/nurse/updateNurse.command.ts":{"language":"typescript","mutants":[{"id":"34","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":15},"start":{"column":5,"line":13}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class UpdateNurseCommand {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(\n    id: string,\n    public readonly coren?: string,\n    public readonly specialization?: string,\n    public readonly shift?: string,\n  ) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/permissions/deletePermission.command.ts":{"language":"typescript","mutants":[{"id":"35","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsUUID } from 'class-validator';\n\nexport class DeletePermissionCommand {\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/commands/role/deleteRole.command.ts":{"language":"typescript","mutants":[{"id":"36","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsUUID } from 'class-validator';\n\nexport class DeleteRoleCommand {\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/handlers/address/createAddress.handler.ts":{"language":"typescript","mutants":[{"id":"38","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":48},"start":{"column":62,"line":17}}},{"id":"39","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":42},"start":{"column":9,"line":18}}},{"id":"40","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":39},"start":{"column":53,"line":30}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":47},"start":{"column":21,"line":42}}},{"id":"42","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":45},"start":{"column":9,"line":44}}},{"id":"43","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":45},"start":{"column":9,"line":44}}},{"id":"44","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar o endereço. Por favor, tente novamente.'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":45},"start":{"column":9,"line":44}}},{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":45},"start":{"column":11,"line":45}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAddressCommand } from 'src/application/commands/address/createAddress.command';\nimport { Address } from 'src/domain/entities/address.entity';\n\n@CommandHandler(CreateAddressCommand)\nexport class CreateAddressHandler\n  implements ICommandHandler<CreateAddressCommand>\n{\n  constructor(\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository<Address>,\n  ) {}\n\n  async execute(command: CreateAddressCommand): Promise<any> {\n    try {\n      const {\n        cep,\n        country,\n        state,\n        city,\n        district,\n        street,\n        number,\n        complement,\n      } = command;\n\n      const address = this.addressRepository.create({\n        cep,\n        country,\n        state,\n        city,\n        district,\n        street,\n        number,\n        complement,\n      });\n\n      return await this.addressRepository.save(address);\n    } catch (error) {\n      throw new BadRequestException(\n        error.message ||\n          'Erro ao criar o endereço. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/handlers/address/deleteAddress.handler.ts":{"language":"typescript","mutants":[{"id":"46","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":59},"start":{"column":47,"line":28}}},{"id":"47","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":31},"start":{"column":60,"line":31}}},{"id":"48","mutatorName":"BooleanLiteral","replacement":"address","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":33},"start":{"column":9,"line":33}}},{"id":"49","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":33},"start":{"column":9,"line":33}}},{"id":"50","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":33},"start":{"column":9,"line":33}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":35},"start":{"column":19,"line":33}}},{"id":"52","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":34},"start":{"column":35,"line":34}}},{"id":"53","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":39},"start":{"column":58,"line":37}}},{"id":"54","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":38},"start":{"column":14,"line":38}}},{"id":"55","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":38},"start":{"column":25,"line":38}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":41},"start":{"column":9,"line":41}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":41},"start":{"column":9,"line":41}}},{"id":"58","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":45},"start":{"column":21,"line":41}}},{"id":"59","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":43},"start":{"column":9,"line":43}}},{"id":"60","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":50},"start":{"column":9,"line":47}}},{"id":"61","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":49},"start":{"column":14,"line":49}}},{"id":"62","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":49},"start":{"column":25,"line":49}}},{"id":"63","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":58},"start":{"column":21,"line":50}}},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":52},"start":{"column":9,"line":52}}},{"id":"65","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":94,"line":56},"start":{"column":9,"line":56}}}],"source":"import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteAddressCommand } from 'src/application/commands/address/deleteAddress.command';\nimport { Address } from 'src/domain/entities/address.entity';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\n@CommandHandler(DeleteAddressCommand)\nexport class DeleteAddressHandler\n  implements ICommandHandler<DeleteAddressCommand>\n{\n  constructor(\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository<Address>,\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(\n    command: DeleteAddressCommand,\n  ): Promise<{ message: string; id: string }> {\n    const { id } = command;\n\n    const address = await this.addressRepository.findOneBy({ id });\n\n    if (!address) {\n      throw new NotFoundException('Endereço não encontrado');\n    }\n\n    const linkedUser = await this.userRepository.findOne({\n      where: { address: { id: id } },\n    });\n\n    if (linkedUser) {\n      throw new ConflictException(\n        'Este endereço está vinculado a um usuário e não pode ser excluído.',\n      );\n    }\n\n    try {\n      await this.addressRepository.delete(id);\n      return { message: 'Endereço deletado com sucesso', id };\n    } catch (error) {\n      console.error(\n        'Erro inesperado ao tentar deletar o endereço no banco:',\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Ocorreu um erro no servidor ao tentar deletar o endereço. Detalhe: ${error.message}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/address/getAllAddress.handler.ts":{"language":"typescript","mutants":[{"id":"66","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":21},"start":{"column":39,"line":15}}},{"id":"67","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":18},"start":{"column":9,"line":16}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":20},"start":{"column":13,"line":18}}},{"id":"69","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":19},"start":{"column":37,"line":19}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllAddressQuery } from 'src/application/query/address/getAllAddress.query';\nimport { Address } from 'src/domain/entities/address.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllAddressQuery)\nexport class GetAllAddressHandler implements IQueryHandler<GetAllAddressQuery> {\n  constructor(\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository<Address>,\n  ) {}\n\n  async execute(): Promise<Address[]> {\n    try {\n      return await this.addressRepository.find();\n    } catch {\n      throw new BadRequestException('Erro ao buscar endereços');\n    }\n  }\n}\n"},"src/application/handlers/address/listSpecificAddress.handler.ts":{"language":"typescript","mutants":[{"id":"70","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":27},"start":{"column":70,"line":17}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":24},"start":{"column":9,"line":20}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":48,"line":21}}},{"id":"73","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"75","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":26},"start":{"column":13,"line":24}}},{"id":"76","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":25},"start":{"column":37,"line":25}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificAddressQuery } from 'src/application/query/address/listSpecificAddress.query';\nimport { Address } from 'src/domain/entities/address.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificAddressQuery)\nexport class ListSpecificAddressHandler\n  implements IQueryHandler<ListSpecificAddressQuery>\n{\n  constructor(\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository<Address>,\n  ) {}\n\n  async execute(query: ListSpecificAddressQuery): Promise<Address[]> {\n    const id = query.id;\n\n    try {\n      return await this.addressRepository.find({\n        where: [{ id }],\n      });\n    } catch {\n      throw new BadRequestException('Erro ao buscar endereço');\n    }\n  }\n}\n"},"src/application/handlers/address/updateAddress.handler.ts":{"language":"typescript","mutants":[{"id":"77","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":80},"start":{"column":53,"line":24}}},{"id":"78","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":37},"start":{"column":60,"line":37}}},{"id":"79","mutatorName":"BooleanLiteral","replacement":"address","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":39},"start":{"column":9,"line":39}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":39},"start":{"column":9,"line":39}}},{"id":"81","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":39},"start":{"column":9,"line":39}}},{"id":"82","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":41},"start":{"column":19,"line":39}}},{"id":"83","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":40},"start":{"column":35,"line":40}}},{"id":"84","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":43},"start":{"column":9,"line":43}}},{"id":"85","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":43},"start":{"column":9,"line":43}}},{"id":"86","mutatorName":"EqualityOperator","replacement":"cep === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":43},"start":{"column":9,"line":43}}},{"id":"87","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":45},"start":{"column":28,"line":43}}},{"id":"88","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":46},"start":{"column":9,"line":46}}},{"id":"89","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":46},"start":{"column":9,"line":46}}},{"id":"90","mutatorName":"EqualityOperator","replacement":"country === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":46},"start":{"column":9,"line":46}}},{"id":"91","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":32,"line":46}}},{"id":"92","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":49},"start":{"column":9,"line":49}}},{"id":"93","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":49},"start":{"column":9,"line":49}}},{"id":"94","mutatorName":"EqualityOperator","replacement":"state === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":49},"start":{"column":9,"line":49}}},{"id":"95","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":51},"start":{"column":30,"line":49}}},{"id":"96","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":52},"start":{"column":9,"line":52}}},{"id":"97","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":52},"start":{"column":9,"line":52}}},{"id":"98","mutatorName":"EqualityOperator","replacement":"city === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":52},"start":{"column":9,"line":52}}},{"id":"99","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":54},"start":{"column":29,"line":52}}},{"id":"100","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":55},"start":{"column":9,"line":55}}},{"id":"101","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":55},"start":{"column":9,"line":55}}},{"id":"102","mutatorName":"EqualityOperator","replacement":"district === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":55},"start":{"column":9,"line":55}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":57},"start":{"column":33,"line":55}}},{"id":"104","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":58},"start":{"column":9,"line":58}}},{"id":"105","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":58},"start":{"column":9,"line":58}}},{"id":"106","mutatorName":"EqualityOperator","replacement":"street === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":58},"start":{"column":9,"line":58}}},{"id":"107","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":60},"start":{"column":31,"line":58}}},{"id":"108","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":61},"start":{"column":9,"line":61}}},{"id":"109","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":61},"start":{"column":9,"line":61}}},{"id":"110","mutatorName":"EqualityOperator","replacement":"number === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":61},"start":{"column":9,"line":61}}},{"id":"111","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":63},"start":{"column":31,"line":61}}},{"id":"112","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":64},"start":{"column":9,"line":64}}},{"id":"113","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":64},"start":{"column":9,"line":64}}},{"id":"114","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":64},"start":{"column":32,"line":64}}},{"id":"115","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":66},"start":{"column":47,"line":64}}},{"id":"116","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":74},"start":{"column":9,"line":68}}},{"id":"117","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":73},"start":{"column":14,"line":70}}},{"id":"118","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":71},"start":{"column":18,"line":71}}},{"id":"119","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":79},"start":{"column":21,"line":74}}},{"id":"120","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":75},"start":{"column":21,"line":75}}},{"id":"121","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":88,"line":77},"start":{"column":9,"line":77}}},{"id":"122","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":86,"line":77},"start":{"column":50,"line":77}}},{"id":"123","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":86,"line":77},"start":{"column":50,"line":77}}},{"id":"124","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro desconhecido'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":86,"line":77},"start":{"column":50,"line":77}}},{"id":"125","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":86,"line":77},"start":{"column":67,"line":77}}}],"source":"import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  BadRequestException,\n  NotFoundException,\n  Injectable,\n} from '@nestjs/common';\nimport { UpdateAddressCommand } from 'src/application/commands/address/updateAddress.command';\nimport { Address } from 'src/domain/entities/address.entity';\n\n@Injectable()\n@CommandHandler(UpdateAddressCommand)\nexport class UpdateAddressHandler\n  implements ICommandHandler<UpdateAddressCommand>\n{\n  constructor(\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository<Address>,\n  ) {}\n\n  async execute(\n    command: UpdateAddressCommand,\n  ): Promise<{ message: string; address: Address }> {\n    const {\n      id,\n      cep,\n      country,\n      state,\n      city,\n      district,\n      street,\n      number,\n      complement,\n    } = command;\n\n    const address = await this.addressRepository.findOneBy({ id });\n\n    if (!address) {\n      throw new NotFoundException('Endereço não encontrado');\n    }\n\n    if (cep !== undefined) {\n      address.cep = cep;\n    }\n    if (country !== undefined) {\n      address.country = country;\n    }\n    if (state !== undefined) {\n      address.state = state;\n    }\n    if (city !== undefined) {\n      address.city = city;\n    }\n    if (district !== undefined) {\n      address.district = district;\n    }\n    if (street !== undefined) {\n      address.street = street;\n    }\n    if (number !== undefined) {\n      address.number = number;\n    }\n    if (command.hasOwnProperty('complement')) {\n      address.complement = complement;\n    }\n\n    try {\n      const updatedAddress = await this.addressRepository.save(address);\n      return {\n        message: 'Endereço atualizado com sucesso',\n        address: updatedAddress,\n      };\n    } catch (error) {\n      console.error('Erro ao atualizar endereço:', error);\n      throw new BadRequestException(\n        `Erro ao atualizar endereço. Detalhes: ${error.message || 'Erro desconhecido'}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/doctor/createDoctor.handler.ts":{"language":"typescript","mutants":[{"id":"126","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":53},"start":{"column":61,"line":20}}},{"id":"127","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":9,"line":21}}},{"id":"128","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":26},"start":{"column":62,"line":24}}},{"id":"129","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":25},"start":{"column":16,"line":25}}},{"id":"130","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":25},"start":{"column":17,"line":25}}},{"id":"131","mutatorName":"BooleanLiteral","replacement":"existingUser","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":28},"start":{"column":11,"line":28}}},{"id":"132","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":28},"start":{"column":11,"line":28}}},{"id":"133","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":28},"start":{"column":11,"line":28}}},{"id":"134","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":30},"start":{"column":26,"line":28}}},{"id":"135","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":29},"start":{"column":37,"line":29}}},{"id":"136","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":34},"start":{"column":66,"line":32}}},{"id":"137","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":33},"start":{"column":16,"line":33}}},{"id":"138","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":33},"start":{"column":17,"line":33}}},{"id":"139","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":36},"start":{"column":11,"line":36}}},{"id":"140","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":36},"start":{"column":11,"line":36}}},{"id":"141","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":38},"start":{"column":27,"line":36}}},{"id":"142","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":37},"start":{"column":37,"line":37}}},{"id":"143","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":45},"start":{"column":51,"line":40}}},{"id":"144","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":52},"start":{"column":21,"line":48}}},{"id":"145","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":50},"start":{"column":9,"line":50}}},{"id":"146","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":50},"start":{"column":9,"line":50}}},{"id":"147","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar médico. Por favor, tente novamente.'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":50},"start":{"column":9,"line":50}}},{"id":"148","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":50},"start":{"column":26,"line":50}}}],"source":"import { BadRequestException, ConflictException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateDoctorCommand } from 'src/application/commands/doctor/createDoctor.command';\nimport { Doctor } from 'src/domain/entities/doctor.entity';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreateDoctorCommand)\nexport class CreateDoctorHandler\n  implements ICommandHandler<CreateDoctorCommand>\n{\n  constructor(\n    @InjectRepository(Doctor)\n    private readonly doctorRepository: Repository<Doctor>,\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(command: CreateDoctorCommand): Promise<any> {\n    try {\n      const { userId, crm, specialization, shift } = command;\n\n      const existingUser = await this.userRepository.findOne({\n        where: [{ id: userId }],\n      });\n\n      if (!existingUser) {\n        throw new ConflictException('User não cadastrado no sistema');\n      }\n\n      const existingDoctor = await this.doctorRepository.findOne({\n        where: [{ crm }],\n      });\n\n      if (existingDoctor) {\n        throw new ConflictException('CRM já cadastrado no sistema');\n      }\n\n      const doctor = this.doctorRepository.create({\n        user: userId,\n        crm,\n        specialization,\n        shift,\n      });\n\n      return await this.doctorRepository.save(doctor);\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao criar médico. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/handlers/doctor/deleteDoctor.handler.ts":{"language":"typescript","mutants":[{"id":"149","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":37},"start":{"column":61,"line":17}}},{"id":"150","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":32},"start":{"column":9,"line":18}}},{"id":"151","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":63,"line":21}}},{"id":"152","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"153","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"154","mutatorName":"BooleanLiteral","replacement":"existingDoctor","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":25},"start":{"column":11,"line":25}}},{"id":"155","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":25},"start":{"column":11,"line":25}}},{"id":"156","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":25},"start":{"column":11,"line":25}}},{"id":"157","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":27},"start":{"column":28,"line":25}}},{"id":"158","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":26},"start":{"column":37,"line":26}}},{"id":"159","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":48,"line":29},"start":{"column":42,"line":29}}},{"id":"160","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":31},"start":{"column":14,"line":31}}},{"id":"161","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":31},"start":{"column":25,"line":31}}},{"id":"162","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":36},"start":{"column":21,"line":32}}},{"id":"163","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":54,"line":34},"start":{"column":9,"line":34}}},{"id":"164","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":54,"line":34},"start":{"column":9,"line":34}}},{"id":"165","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao deletar médico(a).'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":54,"line":34},"start":{"column":9,"line":34}}},{"id":"166","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":54,"line":34},"start":{"column":26,"line":34}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteDoctorCommand } from 'src/application/commands/doctor/deleteDoctor.command';\nimport { Doctor } from 'src/domain/entities/doctor.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(DeleteDoctorCommand)\nexport class DeleteDoctorHandler\n  implements ICommandHandler<DeleteDoctorCommand>\n{\n  constructor(\n    @InjectRepository(Doctor)\n    private readonly doctorRepository: Repository<Doctor>,\n  ) {}\n\n  async execute(command: DeleteDoctorCommand): Promise<any> {\n    try {\n      const { id } = command;\n\n      const existingDoctor = await this.doctorRepository.find({\n        where: [{ id }],\n      });\n\n      if (!existingDoctor) {\n        throw new NotFoundException('Médico(a) não encontrado(a).');\n      }\n\n      await this.doctorRepository.delete({ id });\n\n      return { message: 'Médico(a) deletado com sucesso', id };\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao deletar médico(a).',\n      );\n    }\n  }\n}\n"},"src/application/handlers/doctor/getAllDoctors.handler.ts":{"language":"typescript","mutants":[{"id":"167","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":36},"start":{"column":59,"line":15}}},{"id":"168","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":33},"start":{"column":9,"line":16}}},{"id":"169","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":32},"start":{"column":47,"line":17}}},{"id":"170","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":30},"start":{"column":17,"line":18}}},{"id":"171","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":29},"start":{"column":17,"line":19}}},{"id":"172","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":20},"start":{"column":17,"line":20}}},{"id":"173","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":21},"start":{"column":19,"line":21}}},{"id":"174","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":20,"line":22}}},{"id":"175","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":23},"start":{"column":18,"line":23}}},{"id":"176","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":24},"start":{"column":20,"line":24}}},{"id":"177","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":25},"start":{"column":23,"line":25}}},{"id":"178","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":26},"start":{"column":23,"line":26}}},{"id":"179","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":27},"start":{"column":24,"line":27}}},{"id":"180","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":28},"start":{"column":21,"line":28}}},{"id":"181","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":31},"start":{"column":20,"line":31}}},{"id":"182","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":31},"start":{"column":21,"line":31}}},{"id":"183","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":35},"start":{"column":21,"line":33}}},{"id":"184","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":34},"start":{"column":37,"line":34}}},{"id":"185","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":34},"start":{"column":37,"line":34}}},{"id":"186","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao buscar médico'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":34},"start":{"column":37,"line":34}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":34},"start":{"column":54,"line":34}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllDoctorsQuery } from 'src/application/query/doctor/getAllDoctors.query';\nimport { Doctor } from 'src/domain/entities/doctor.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllDoctorsQuery)\nexport class GetAllDoctorsHandler implements IQueryHandler<GetAllDoctorsQuery> {\n  constructor(\n    @InjectRepository(Doctor)\n    private readonly doctorRepository: Repository<Doctor>,\n  ) {}\n\n  async execute(_query: GetAllDoctorsQuery): Promise<any> {\n    try {\n      return await this.doctorRepository.find({\n        select: {\n          user: {\n            id: true,\n            name: true,\n            email: true,\n            cpf: true,\n            phone: true,\n            isActive: true,\n            password: false,\n            addressId: true,\n            roleId: true,\n          },\n        },\n        relations: ['user'],\n      });\n    } catch (error) {\n      throw new BadRequestException(error.message || 'Erro ao buscar médico');\n    }\n  }\n}\n"},"src/application/handlers/doctor/listSpecificDoctor.handler.ts":{"language":"typescript","mutants":[{"id":"188","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":51},"start":{"column":63,"line":17}}},{"id":"189","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":46},"start":{"column":9,"line":18}}},{"id":"190","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":62,"line":21}}},{"id":"191","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"192","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"193","mutatorName":"BooleanLiteral","replacement":"existingNurse","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"194","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"195","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"196","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":27},"start":{"column":27,"line":25}}},{"id":"197","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":26},"start":{"column":37,"line":26}}},{"id":"198","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":45},"start":{"column":44,"line":29}}},{"id":"199","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":42},"start":{"column":17,"line":30}}},{"id":"200","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":41},"start":{"column":17,"line":31}}},{"id":"201","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":32},"start":{"column":17,"line":32}}},{"id":"202","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":33},"start":{"column":19,"line":33}}},{"id":"203","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":34},"start":{"column":20,"line":34}}},{"id":"204","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":35},"start":{"column":18,"line":35}}},{"id":"205","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":36},"start":{"column":20,"line":36}}},{"id":"206","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":37},"start":{"column":23,"line":37}}},{"id":"207","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":38},"start":{"column":23,"line":38}}},{"id":"208","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":39},"start":{"column":24,"line":39}}},{"id":"209","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":40},"start":{"column":21,"line":40}}},{"id":"210","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":43},"start":{"column":16,"line":43}}},{"id":"211","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":44},"start":{"column":20,"line":44}}},{"id":"212","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":44},"start":{"column":21,"line":44}}},{"id":"213","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":50},"start":{"column":21,"line":46}}},{"id":"214","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":48},"start":{"column":9,"line":48}}},{"id":"215","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":48},"start":{"column":9,"line":48}}},{"id":"216","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao buscar médico(a)'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":48},"start":{"column":9,"line":48}}},{"id":"217","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":48},"start":{"column":26,"line":48}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificDoctorQuery } from 'src/application/query/doctor/listSpecificDoctor.query';\nimport { Doctor } from 'src/domain/entities/doctor.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificDoctorQuery)\nexport class ListSpecificDoctorHandler\n  implements IQueryHandler<ListSpecificDoctorQuery>\n{\n  constructor(\n    @InjectRepository(Doctor)\n    private readonly doctorRepository: Repository<Doctor>,\n  ) {}\n\n  async execute(query: ListSpecificDoctorQuery): Promise<any> {\n    try {\n      const { id } = query;\n\n      const existingNurse = await this.doctorRepository.find({\n        where: [{ id }],\n      });\n\n      if (!existingNurse) {\n        throw new NotFoundException('Médico(a) não encontrado(a).');\n      }\n\n      return this.doctorRepository.findOne({\n        select: {\n          user: {\n            id: true,\n            name: true,\n            email: true,\n            cpf: true,\n            phone: true,\n            isActive: true,\n            password: false,\n            addressId: true,\n            roleId: true,\n          },\n        },\n        where: { id },\n        relations: ['user'],\n      });\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao buscar médico(a)',\n      );\n    }\n  }\n}\n"},"src/application/handlers/doctor/updateDoctor.handler.ts":{"language":"typescript","mutants":[{"id":"218","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":61},"start":{"column":61,"line":21}}},{"id":"219","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":56},"start":{"column":9,"line":22}}},{"id":"220","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":27},"start":{"column":57,"line":25}}},{"id":"221","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":26},"start":{"column":16,"line":26}}},{"id":"222","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":26},"start":{"column":17,"line":26}}},{"id":"223","mutatorName":"BooleanLiteral","replacement":"nurse","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":29},"start":{"column":11,"line":29}}},{"id":"224","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":29},"start":{"column":11,"line":29}}},{"id":"225","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":29},"start":{"column":11,"line":29}}},{"id":"226","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":31},"start":{"column":19,"line":29}}},{"id":"227","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":30},"start":{"column":37,"line":30}}},{"id":"228","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":33},"start":{"column":11,"line":33}}},{"id":"229","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":33},"start":{"column":11,"line":33}}},{"id":"230","mutatorName":"LogicalOperator","replacement":"crm || crm !== nurse.crm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":33},"start":{"column":11,"line":33}}},{"id":"231","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":33},"start":{"column":18,"line":33}}},{"id":"232","mutatorName":"EqualityOperator","replacement":"crm === nurse.crm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":33},"start":{"column":18,"line":33}}},{"id":"233","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":41},"start":{"column":37,"line":33}}},{"id":"234","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":36},"start":{"column":67,"line":34}}},{"id":"235","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":35},"start":{"column":18,"line":35}}},{"id":"236","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":35},"start":{"column":19,"line":35}}},{"id":"237","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":38},"start":{"column":13,"line":38}}},{"id":"238","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":38},"start":{"column":13,"line":38}}},{"id":"239","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":40},"start":{"column":28,"line":38}}},{"id":"240","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":70,"line":39},"start":{"column":39,"line":39}}},{"id":"241","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":43},"start":{"column":11,"line":43}}},{"id":"242","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":43},"start":{"column":11,"line":43}}},{"id":"243","mutatorName":"EqualityOperator","replacement":"crm === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":43},"start":{"column":11,"line":43}}},{"id":"244","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":45},"start":{"column":30,"line":43}}},{"id":"245","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":47},"start":{"column":11,"line":47}}},{"id":"246","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":47},"start":{"column":11,"line":47}}},{"id":"247","mutatorName":"EqualityOperator","replacement":"specialization === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":47},"start":{"column":11,"line":47}}},{"id":"248","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":49},"start":{"column":41,"line":47}}},{"id":"249","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":51},"start":{"column":11,"line":51}}},{"id":"250","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":51},"start":{"column":11,"line":51}}},{"id":"251","mutatorName":"EqualityOperator","replacement":"shift === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":51},"start":{"column":11,"line":51}}},{"id":"252","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":53},"start":{"column":32,"line":51}}},{"id":"253","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":60},"start":{"column":21,"line":56}}},{"id":"254","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":58},"start":{"column":9,"line":58}}},{"id":"255","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":58},"start":{"column":9,"line":58}}},{"id":"256","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao atualizar médico(a).'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":58},"start":{"column":9,"line":58}}},{"id":"257","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":58},"start":{"column":26,"line":58}}}],"source":"import {\n  BadRequestException,\n  ConflictException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateDoctorCommand } from 'src/application/commands/doctor/updateDoctor.command';\nimport { Doctor } from 'src/domain/entities/doctor.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(UpdateDoctorCommand)\nexport class UpdateDoctorHandler\n  implements ICommandHandler<UpdateDoctorCommand>\n{\n  constructor(\n    @InjectRepository(Doctor)\n    private readonly doctorRepository: Repository<Doctor>,\n  ) {}\n\n  async execute(command: UpdateDoctorCommand): Promise<any> {\n    try {\n      const { id, crm, specialization, shift } = command;\n\n      const nurse = await this.doctorRepository.findOne({\n        where: [{ id }],\n      });\n\n      if (!nurse) {\n        throw new NotFoundException('Médico(a) não encontrado(a).');\n      }\n\n      if (crm && crm !== nurse.crm) {\n        const existingCoren = await this.doctorRepository.findOne({\n          where: [{ crm }],\n        });\n\n        if (existingCoren) {\n          throw new ConflictException('CRM já cadastrado no sistema.');\n        }\n      }\n\n      if (crm !== undefined) {\n        nurse.crm = crm;\n      }\n\n      if (specialization !== undefined) {\n        nurse.specialization = specialization;\n      }\n\n      if (shift !== undefined) {\n        nurse.shift = shift;\n      }\n\n      return await this.doctorRepository.save(nurse);\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao atualizar médico(a).',\n      );\n    }\n  }\n}\n"},"src/application/handlers/nurse/createNurse.handler.ts":{"language":"typescript","mutants":[{"id":"258","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":52},"start":{"column":60,"line":18}}},{"id":"259","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":46},"start":{"column":9,"line":19}}},{"id":"260","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":24},"start":{"column":62,"line":22}}},{"id":"261","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":23},"start":{"column":16,"line":23}}},{"id":"262","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":23},"start":{"column":17,"line":23}}},{"id":"263","mutatorName":"BooleanLiteral","replacement":"existingUser","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":26},"start":{"column":11,"line":26}}},{"id":"264","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":26},"start":{"column":11,"line":26}}},{"id":"265","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":26},"start":{"column":11,"line":26}}},{"id":"266","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":28},"start":{"column":26,"line":26}}},{"id":"267","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":27},"start":{"column":37,"line":27}}},{"id":"268","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":32},"start":{"column":64,"line":30}}},{"id":"269","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":31},"start":{"column":16,"line":31}}},{"id":"270","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":31},"start":{"column":17,"line":31}}},{"id":"271","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":34},"start":{"column":11,"line":34}}},{"id":"272","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":34},"start":{"column":11,"line":34}}},{"id":"273","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":36},"start":{"column":26,"line":34}}},{"id":"274","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":35},"start":{"column":37,"line":35}}},{"id":"275","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":43},"start":{"column":49,"line":38}}},{"id":"276","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":51},"start":{"column":21,"line":46}}},{"id":"277","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":49},"start":{"column":9,"line":48}}},{"id":"278","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":49},"start":{"column":9,"line":48}}},{"id":"279","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar enfermeira. Por favor, tente novamente.'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":49},"start":{"column":9,"line":48}}},{"id":"280","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":49},"start":{"column":11,"line":49}}}],"source":"import { BadRequestException, ConflictException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateNurseCommand } from 'src/application/commands/nurse/createNurse.command';\nimport { Nurse } from 'src/domain/entities/nurse.entity';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreateNurseCommand)\nexport class CreateNurseHandler implements ICommandHandler<CreateNurseCommand> {\n  constructor(\n    @InjectRepository(Nurse)\n    private readonly nurseRepository: Repository<Nurse>,\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(command: CreateNurseCommand): Promise<any> {\n    try {\n      const { userId, coren, specialization, shift } = command;\n\n      const existingUser = await this.userRepository.findOne({\n        where: [{ id: userId }],\n      });\n\n      if (!existingUser) {\n        throw new ConflictException('User não cadastrado no sistema');\n      }\n\n      const existingNurse = await this.nurseRepository.findOne({\n        where: [{ coren }],\n      });\n\n      if (existingNurse) {\n        throw new ConflictException('COREN já cadastrado no sistema');\n      }\n\n      const nurse = this.nurseRepository.create({\n        user: userId,\n        coren,\n        specialization,\n        shift,\n      });\n\n      return await this.nurseRepository.save(nurse);\n    } catch (error) {\n      throw new BadRequestException(\n        error.message ||\n          'Erro ao criar enfermeira. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/handlers/nurse/deleteNurse.handler.ts":{"language":"typescript","mutants":[{"id":"281","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":35},"start":{"column":60,"line":15}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":30},"start":{"column":9,"line":16}}},{"id":"283","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":21},"start":{"column":61,"line":19}}},{"id":"284","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":20},"start":{"column":16,"line":20}}},{"id":"285","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":20},"start":{"column":17,"line":20}}},{"id":"286","mutatorName":"BooleanLiteral","replacement":"existingNurse","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":23},"start":{"column":11,"line":23}}},{"id":"287","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":23},"start":{"column":11,"line":23}}},{"id":"288","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":23},"start":{"column":11,"line":23}}},{"id":"289","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":25},"start":{"column":27,"line":23}}},{"id":"290","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":24},"start":{"column":37,"line":24}}},{"id":"291","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":27},"start":{"column":41,"line":27}}},{"id":"292","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":29},"start":{"column":14,"line":29}}},{"id":"293","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":29},"start":{"column":25,"line":29}}},{"id":"294","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":34},"start":{"column":21,"line":30}}},{"id":"295","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":32},"start":{"column":9,"line":32}}},{"id":"296","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":32},"start":{"column":9,"line":32}}},{"id":"297","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao deletar enfermeiro(a).'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":32},"start":{"column":9,"line":32}}},{"id":"298","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":32},"start":{"column":26,"line":32}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteNurseCommand } from 'src/application/commands/nurse/deleteNurse.command';\nimport { Nurse } from 'src/domain/entities/nurse.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(DeleteNurseCommand)\nexport class DeleteNurseHandler implements ICommandHandler<DeleteNurseCommand> {\n  constructor(\n    @InjectRepository(Nurse)\n    private readonly nurseRepository: Repository<Nurse>,\n  ) {}\n\n  async execute(command: DeleteNurseCommand): Promise<any> {\n    try {\n      const { id } = command;\n\n      const existingNurse = await this.nurseRepository.find({\n        where: [{ id }],\n      });\n\n      if (!existingNurse) {\n        throw new NotFoundException('Enfermeiro(a) não encontrado(a).');\n      }\n\n      await this.nurseRepository.delete({ id });\n\n      return { message: 'Enfermeiro(a) deletado com sucesso', id };\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao deletar enfermeiro(a).',\n      );\n    }\n  }\n}\n"},"src/application/handlers/nurse/getAllNurses.handler.ts":{"language":"typescript","mutants":[{"id":"299","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":38},"start":{"column":58,"line":15}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":33},"start":{"column":9,"line":16}}},{"id":"301","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":32},"start":{"column":46,"line":17}}},{"id":"302","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":30},"start":{"column":17,"line":18}}},{"id":"303","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":29},"start":{"column":17,"line":19}}},{"id":"304","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":20},"start":{"column":17,"line":20}}},{"id":"305","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":21},"start":{"column":19,"line":21}}},{"id":"306","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":20,"line":22}}},{"id":"307","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":23},"start":{"column":18,"line":23}}},{"id":"308","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":24},"start":{"column":20,"line":24}}},{"id":"309","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":25},"start":{"column":23,"line":25}}},{"id":"310","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":26},"start":{"column":23,"line":26}}},{"id":"311","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":27},"start":{"column":24,"line":27}}},{"id":"312","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":28},"start":{"column":21,"line":28}}},{"id":"313","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":31},"start":{"column":20,"line":31}}},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":31},"start":{"column":21,"line":31}}},{"id":"315","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":37},"start":{"column":21,"line":33}}},{"id":"316","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":35},"start":{"column":9,"line":35}}},{"id":"317","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":35},"start":{"column":9,"line":35}}},{"id":"318","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao buscar enfermeira'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":35},"start":{"column":9,"line":35}}},{"id":"319","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":35},"start":{"column":26,"line":35}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllNursesQuery } from 'src/application/query/nurse/getAllNurses.query';\nimport { Nurse } from 'src/domain/entities/nurse.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllNursesQuery)\nexport class GetAllNursesHandler implements IQueryHandler<GetAllNursesQuery> {\n  constructor(\n    @InjectRepository(Nurse)\n    private readonly nurseRepository: Repository<Nurse>,\n  ) {}\n\n  async execute(_query: GetAllNursesQuery): Promise<any> {\n    try {\n      return await this.nurseRepository.find({\n        select: {\n          user: {\n            id: true,\n            name: true,\n            email: true,\n            cpf: true,\n            phone: true,\n            isActive: true,\n            password: false,\n            addressId: true,\n            roleId: true,\n          },\n        },\n        relations: ['user'],\n      });\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao buscar enfermeira',\n      );\n    }\n  }\n}\n"},"src/application/handlers/nurse/listSpecificNurse.handler.ts":{"language":"typescript","mutants":[{"id":"320","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":51},"start":{"column":62,"line":17}}},{"id":"321","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":46},"start":{"column":9,"line":18}}},{"id":"322","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":61,"line":21}}},{"id":"323","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"324","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"325","mutatorName":"BooleanLiteral","replacement":"existingNurse","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"326","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":25},"start":{"column":11,"line":25}}},{"id":"328","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":27},"start":{"column":27,"line":25}}},{"id":"329","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":26},"start":{"column":37,"line":26}}},{"id":"330","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":45},"start":{"column":43,"line":29}}},{"id":"331","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":42},"start":{"column":17,"line":30}}},{"id":"332","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":41},"start":{"column":17,"line":31}}},{"id":"333","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":32},"start":{"column":17,"line":32}}},{"id":"334","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":33},"start":{"column":19,"line":33}}},{"id":"335","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":34},"start":{"column":20,"line":34}}},{"id":"336","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":35},"start":{"column":18,"line":35}}},{"id":"337","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":36},"start":{"column":20,"line":36}}},{"id":"338","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":37},"start":{"column":23,"line":37}}},{"id":"339","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":38},"start":{"column":23,"line":38}}},{"id":"340","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":39},"start":{"column":24,"line":39}}},{"id":"341","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":40},"start":{"column":21,"line":40}}},{"id":"342","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":43},"start":{"column":16,"line":43}}},{"id":"343","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":44},"start":{"column":20,"line":44}}},{"id":"344","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":44},"start":{"column":21,"line":44}}},{"id":"345","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":50},"start":{"column":21,"line":46}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":48},"start":{"column":9,"line":48}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":48},"start":{"column":9,"line":48}}},{"id":"348","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao buscar enfermeiro(a)'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":48},"start":{"column":9,"line":48}}},{"id":"349","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":48},"start":{"column":26,"line":48}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificNurseQuery } from 'src/application/query/nurse/listSpecificNurse.query';\nimport { Nurse } from 'src/domain/entities/nurse.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificNurseQuery)\nexport class ListSpecificNurseHandler\n  implements IQueryHandler<ListSpecificNurseQuery>\n{\n  constructor(\n    @InjectRepository(Nurse)\n    private readonly nurseRepository: Repository<Nurse>,\n  ) {}\n\n  async execute(query: ListSpecificNurseQuery): Promise<any> {\n    try {\n      const { id } = query;\n\n      const existingNurse = await this.nurseRepository.find({\n        where: [{ id }],\n      });\n\n      if (!existingNurse) {\n        throw new NotFoundException('Enfermeiro(a) não encontrado(a).');\n      }\n\n      return this.nurseRepository.findOne({\n        select: {\n          user: {\n            id: true,\n            name: true,\n            email: true,\n            cpf: true,\n            phone: true,\n            isActive: true,\n            password: false,\n            addressId: true,\n            roleId: true,\n          },\n        },\n        where: { id },\n        relations: ['user'],\n      });\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao buscar enfermeiro(a)',\n      );\n    }\n  }\n}\n"},"src/application/handlers/nurse/updateNurse.handler.ts":{"language":"typescript","mutants":[{"id":"350","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":59},"start":{"column":60,"line":19}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":54},"start":{"column":9,"line":20}}},{"id":"352","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":25},"start":{"column":56,"line":23}}},{"id":"353","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":24},"start":{"column":16,"line":24}}},{"id":"354","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":24},"start":{"column":17,"line":24}}},{"id":"355","mutatorName":"BooleanLiteral","replacement":"nurse","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":27},"start":{"column":11,"line":27}}},{"id":"356","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":27},"start":{"column":11,"line":27}}},{"id":"357","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":17,"line":27},"start":{"column":11,"line":27}}},{"id":"358","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":29},"start":{"column":19,"line":27}}},{"id":"359","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":28},"start":{"column":37,"line":28}}},{"id":"360","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}}},{"id":"361","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}}},{"id":"362","mutatorName":"LogicalOperator","replacement":"coren || coren !== nurse.coren","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":31},"start":{"column":11,"line":31}}},{"id":"363","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":31},"start":{"column":20,"line":31}}},{"id":"364","mutatorName":"EqualityOperator","replacement":"coren === nurse.coren","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":31},"start":{"column":20,"line":31}}},{"id":"365","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":39},"start":{"column":43,"line":31}}},{"id":"366","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":34},"start":{"column":66,"line":32}}},{"id":"367","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":33},"start":{"column":18,"line":33}}},{"id":"368","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":33},"start":{"column":19,"line":33}}},{"id":"369","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":36},"start":{"column":13,"line":36}}},{"id":"370","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":36},"start":{"column":13,"line":36}}},{"id":"371","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":38},"start":{"column":28,"line":36}}},{"id":"372","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":72,"line":37},"start":{"column":39,"line":37}}},{"id":"373","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":41},"start":{"column":11,"line":41}}},{"id":"374","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":41},"start":{"column":11,"line":41}}},{"id":"375","mutatorName":"EqualityOperator","replacement":"coren === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":41},"start":{"column":11,"line":41}}},{"id":"376","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":43},"start":{"column":32,"line":41}}},{"id":"377","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":45},"start":{"column":11,"line":45}}},{"id":"378","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":45},"start":{"column":11,"line":45}}},{"id":"379","mutatorName":"EqualityOperator","replacement":"specialization === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":45},"start":{"column":11,"line":45}}},{"id":"380","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":47},"start":{"column":41,"line":45}}},{"id":"381","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":49},"start":{"column":11,"line":49}}},{"id":"382","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":49},"start":{"column":11,"line":49}}},{"id":"383","mutatorName":"EqualityOperator","replacement":"shift === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":49},"start":{"column":11,"line":49}}},{"id":"384","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":51},"start":{"column":32,"line":49}}},{"id":"385","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":58},"start":{"column":21,"line":54}}},{"id":"386","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":56},"start":{"column":9,"line":56}}},{"id":"387","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":56},"start":{"column":9,"line":56}}},{"id":"388","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao atualizar enfermeiro(a).'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":56},"start":{"column":9,"line":56}}},{"id":"389","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":56},"start":{"column":26,"line":56}}}],"source":"import {\n  BadRequestException,\n  ConflictException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateNurseCommand } from 'src/application/commands/nurse/updateNurse.command';\nimport { Nurse } from 'src/domain/entities/nurse.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(UpdateNurseCommand)\nexport class UpdateNurseHandler implements ICommandHandler<UpdateNurseCommand> {\n  constructor(\n    @InjectRepository(Nurse)\n    private readonly nurseRepository: Repository<Nurse>,\n  ) {}\n\n  async execute(command: UpdateNurseCommand): Promise<any> {\n    try {\n      const { id, coren, specialization, shift } = command;\n\n      const nurse = await this.nurseRepository.findOne({\n        where: [{ id }],\n      });\n\n      if (!nurse) {\n        throw new NotFoundException('Enfermeiro(a) não encontrado(a).');\n      }\n\n      if (coren && coren !== nurse.coren) {\n        const existingCoren = await this.nurseRepository.findOne({\n          where: [{ coren }],\n        });\n\n        if (existingCoren) {\n          throw new ConflictException('COREN já cadastrado no sistema.');\n        }\n      }\n\n      if (coren !== undefined) {\n        nurse.coren = coren;\n      }\n\n      if (specialization !== undefined) {\n        nurse.specialization = specialization;\n      }\n\n      if (shift !== undefined) {\n        nurse.shift = shift;\n      }\n\n      return await this.nurseRepository.save(nurse);\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao atualizar enfermeiro(a).',\n      );\n    }\n  }\n}\n"},"src/application/handlers/permissions/createPermissions.handler.ts":{"language":"typescript","mutants":[{"id":"390","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":50},"start":{"column":65,"line":17}}},{"id":"391","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":45},"start":{"column":9,"line":18}}},{"id":"392","mutatorName":"MethodExpression","replacement":"permissionName.toLowerCase()","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":21},"start":{"column":29,"line":21}}},{"id":"393","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":25},"start":{"column":74,"line":23}}},{"id":"394","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":24},"start":{"column":16,"line":24}}},{"id":"395","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":24},"start":{"column":17,"line":24}}},{"id":"396","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":27},"start":{"column":11,"line":27}}},{"id":"397","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":27},"start":{"column":11,"line":27}}},{"id":"398","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":31},"start":{"column":31,"line":27}}},{"id":"399","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":86,"line":29},"start":{"column":11,"line":29}}},{"id":"400","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":35},"start":{"column":59,"line":33}}},{"id":"401","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":44},"start":{"column":14,"line":39}}},{"id":"402","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":48,"line":40},"start":{"column":18,"line":40}}},{"id":"403","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":43},"start":{"column":21,"line":41}}},{"id":"404","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":49},"start":{"column":21,"line":45}}},{"id":"405","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":47},"start":{"column":9,"line":47}}},{"id":"406","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":47},"start":{"column":9,"line":47}}},{"id":"407","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar permissão. Por favor, tente novamente.'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":47},"start":{"column":9,"line":47}}},{"id":"408","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":47},"start":{"column":26,"line":47}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreatePermissionCommand } from 'src/application/commands/permissions/createPermission.command';\nimport { Permission } from 'src/domain/entities/permissions.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreatePermissionCommand)\nexport class CreatePermissionHandler\n  implements ICommandHandler<CreatePermissionCommand>\n{\n  constructor(\n    @InjectRepository(Permission)\n    private readonly permissionRepository: Repository<Permission>,\n  ) {}\n\n  async execute(command: CreatePermissionCommand): Promise<any> {\n    try {\n      const { permissionName } = command;\n\n      const formattedName = permissionName.toUpperCase();\n\n      const existingPermission = await this.permissionRepository.findOne({\n        where: [{ permissionName: formattedName }],\n      });\n\n      if (existingPermission) {\n        throw new BadRequestException(\n          'Nome da permissão já em uso. Por favor, tente novamente com outros dados.',\n        );\n      }\n\n      const permission = this.permissionRepository.create({\n        permissionName: formattedName,\n      });\n\n      await this.permissionRepository.save(permission);\n\n      return {\n        message: 'Permissão criada com sucesso',\n        permission: {\n          permissionName: permission.permissionName,\n        },\n      };\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao criar permissão. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/handlers/permissions/deletePermission.handler.ts":{"language":"typescript","mutants":[{"id":"409","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":45},"start":{"column":47,"line":24}}},{"id":"410","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":72,"line":27},"start":{"column":66,"line":27}}},{"id":"411","mutatorName":"BooleanLiteral","replacement":"permission","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":29},"start":{"column":9,"line":29}}},{"id":"412","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":29},"start":{"column":9,"line":29}}},{"id":"413","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":29},"start":{"column":9,"line":29}}},{"id":"414","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":31},"start":{"column":22,"line":29}}},{"id":"415","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":30},"start":{"column":35,"line":30}}},{"id":"416","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":36},"start":{"column":9,"line":33}}},{"id":"417","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":35},"start":{"column":14,"line":35}}},{"id":"418","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":35},"start":{"column":25,"line":35}}},{"id":"419","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":44},"start":{"column":21,"line":36}}},{"id":"420","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":38},"start":{"column":9,"line":38}}},{"id":"421","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":95,"line":42},"start":{"column":9,"line":42}}}],"source":"import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeletePermissionCommand } from 'src/application/commands/permissions/deletePermission.command';\nimport { Permission } from 'src/domain/entities/permissions.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\n@CommandHandler(DeletePermissionCommand)\nexport class DeletePermissionHandler\n  implements ICommandHandler<DeletePermissionCommand>\n{\n  constructor(\n    @InjectRepository(Permission)\n    private readonly permissionRepository: Repository<Permission>,\n  ) {}\n\n  async execute(\n    command: DeletePermissionCommand,\n  ): Promise<{ message: string; id: string }> {\n    const { id } = command;\n\n    const permission = await this.permissionRepository.findOneBy({ id });\n\n    if (!permission) {\n      throw new NotFoundException('Permissão não encontrada');\n    }\n\n    try {\n      await this.permissionRepository.delete(id);\n      return { message: 'Permissão deletada com sucesso', id };\n    } catch (error) {\n      console.error(\n        'Erro inesperado ao tentar deletar a permissão no banco:',\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Ocorreu um erro no servidor ao tentar deletar a permissão. Detalhe: ${error.message}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/permissions/getAllPermissions.handler.ts":{"language":"typescript","mutants":[{"id":"422","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":23},"start":{"column":42,"line":17}}},{"id":"423","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":20},"start":{"column":9,"line":18}}},{"id":"424","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":22},"start":{"column":13,"line":20}}},{"id":"425","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":64,"line":21},"start":{"column":37,"line":21}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllPermissionsQuery } from 'src/application/query/permissions/getAllPermissions.query';\nimport { Permission } from 'src/domain/entities/permissions.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllPermissionsQuery)\nexport class GetAllPermissionsHandler\n  implements IQueryHandler<GetAllPermissionsQuery>\n{\n  constructor(\n    @InjectRepository(Permission)\n    private readonly permissionRepository: Repository<Permission>,\n  ) {}\n\n  async execute(): Promise<Permission[]> {\n    try {\n      return await this.permissionRepository.find();\n    } catch {\n      throw new BadRequestException('Erro ao buscar permissões');\n    }\n  }\n}\n"},"src/application/handlers/permissions/listSpecificPermission.handler.ts":{"language":"typescript","mutants":[{"id":"426","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":27},"start":{"column":76,"line":17}}},{"id":"427","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":24},"start":{"column":9,"line":20}}},{"id":"428","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":51,"line":21}}},{"id":"429","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"430","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"431","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":26},"start":{"column":13,"line":24}}},{"id":"432","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":25},"start":{"column":37,"line":25}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificPermissionQuery } from 'src/application/query/permissions/listSpecificPermission.query';\nimport { Permission } from 'src/domain/entities/permissions.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificPermissionQuery)\nexport class ListSpecificPermissionHandler\n  implements IQueryHandler<ListSpecificPermissionQuery>\n{\n  constructor(\n    @InjectRepository(Permission)\n    private readonly permissionRepository: Repository<Permission>,\n  ) {}\n\n  async execute(query: ListSpecificPermissionQuery): Promise<Permission[]> {\n    const id = query.id;\n\n    try {\n      return await this.permissionRepository.find({\n        where: [{ id }],\n      });\n    } catch {\n      throw new BadRequestException('Erro ao buscar permissão');\n    }\n  }\n}\n"},"src/application/handlers/permissions/updatePermission.handler.ts":{"language":"typescript","mutants":[{"id":"433","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":61},"start":{"column":59,"line":25}}},{"id":"434","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":72,"line":28},"start":{"column":66,"line":28}}},{"id":"435","mutatorName":"MethodExpression","replacement":"permissionName.toLowerCase()","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":30},"start":{"column":27,"line":30}}},{"id":"436","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":34},"start":{"column":68,"line":32}}},{"id":"437","mutatorName":"BooleanLiteral","replacement":"permission","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":36},"start":{"column":9,"line":36}}},{"id":"438","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":36},"start":{"column":9,"line":36}}},{"id":"439","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":36},"start":{"column":9,"line":36}}},{"id":"440","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":38},"start":{"column":22,"line":36}}},{"id":"441","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":37},"start":{"column":35,"line":37}}},{"id":"442","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":40},"start":{"column":9,"line":40}}},{"id":"443","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":40},"start":{"column":9,"line":40}}},{"id":"444","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":42},"start":{"column":23,"line":40}}},{"id":"445","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":41},"start":{"column":35,"line":41}}},{"id":"446","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":44},"start":{"column":9,"line":44}}},{"id":"447","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":44},"start":{"column":9,"line":44}}},{"id":"448","mutatorName":"EqualityOperator","replacement":"permissionName === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":44},"start":{"column":9,"line":44}}},{"id":"449","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":46},"start":{"column":39,"line":44}}},{"id":"450","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":55},"start":{"column":9,"line":48}}},{"id":"451","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":54},"start":{"column":14,"line":51}}},{"id":"452","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":52},"start":{"column":18,"line":52}}},{"id":"453","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":60},"start":{"column":21,"line":55}}},{"id":"454","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":56},"start":{"column":21,"line":56}}},{"id":"455","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":89,"line":58},"start":{"column":9,"line":58}}},{"id":"456","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":58},"start":{"column":51,"line":58}}},{"id":"457","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":58},"start":{"column":51,"line":58}}},{"id":"458","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro desconhecido'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":58},"start":{"column":51,"line":58}}},{"id":"459","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":58},"start":{"column":68,"line":58}}}],"source":"import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  BadRequestException,\n  NotFoundException,\n  Injectable,\n  ConflictException,\n} from '@nestjs/common';\nimport { UpdatePermissionCommand } from 'src/application/commands/permissions/updatePermission.command';\nimport { Permission } from 'src/domain/entities/permissions.entity';\n\n@Injectable()\n@CommandHandler(UpdatePermissionCommand)\nexport class UpdatePermissionHandler\n  implements ICommandHandler<UpdatePermissionCommand>\n{\n  constructor(\n    @InjectRepository(Permission)\n    private readonly permissionRepository: Repository<Permission>,\n  ) {}\n\n  async execute(\n    command: UpdatePermissionCommand,\n  ): Promise<{ message: string; permission: Permission }> {\n    const { id, permissionName } = command;\n\n    const permission = await this.permissionRepository.findOneBy({ id });\n\n    const formattedName = permissionName.toUpperCase();\n\n    const existingName = await this.permissionRepository.findOneBy({\n      permissionName: formattedName,\n    });\n\n    if (!permission) {\n      throw new NotFoundException('Permissão não encontrada');\n    }\n\n    if (existingName) {\n      throw new ConflictException('Nome já utilizado por outra permissão');\n    }\n\n    if (permissionName !== undefined) {\n      permission.permissionName = formattedName;\n    }\n\n    try {\n      const updatedPermission =\n        await this.permissionRepository.save(permission);\n      return {\n        message: 'Permissão atualizada com sucesso',\n        permission: updatedPermission,\n      };\n    } catch (error) {\n      console.error('Erro ao atualizar permissões:', error);\n      throw new BadRequestException(\n        `Erro ao atualizar permissão. Detalhes: ${error.message || 'Erro desconhecido'}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/role/createRole.handler.ts":{"language":"typescript","mutants":[{"id":"460","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":48},"start":{"column":59,"line":15}}},{"id":"461","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":43},"start":{"column":9,"line":16}}},{"id":"462","mutatorName":"MethodExpression","replacement":"name.toLowerCase()","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":19},"start":{"column":29,"line":19}}},{"id":"463","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":62,"line":21}}},{"id":"464","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":22},"start":{"column":16,"line":22}}},{"id":"465","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":22},"start":{"column":17,"line":22}}},{"id":"466","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":25},"start":{"column":11,"line":25}}},{"id":"467","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":25},"start":{"column":11,"line":25}}},{"id":"468","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":29},"start":{"column":25,"line":25}}},{"id":"469","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":81,"line":27},"start":{"column":11,"line":27}}},{"id":"470","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":33},"start":{"column":47,"line":31}}},{"id":"471","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":42},"start":{"column":14,"line":37}}},{"id":"472","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":43,"line":38},"start":{"column":18,"line":38}}},{"id":"473","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":41},"start":{"column":15,"line":39}}},{"id":"474","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":47},"start":{"column":21,"line":43}}},{"id":"475","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":45},"start":{"column":9,"line":45}}},{"id":"476","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":45},"start":{"column":9,"line":45}}},{"id":"477","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar role. Por favor, tente novamente.'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":45},"start":{"column":9,"line":45}}},{"id":"478","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":45},"start":{"column":26,"line":45}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateRoleCommand } from 'src/application/commands/role/createRole.command';\nimport { Role } from 'src/domain/entities/role.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(CreateRoleCommand)\nexport class CreateRoleHandler implements ICommandHandler<CreateRoleCommand> {\n  constructor(\n    @InjectRepository(Role)\n    private readonly roleRepository: Repository<Role>,\n  ) {}\n\n  async execute(command: CreateRoleCommand): Promise<any> {\n    try {\n      const { name } = command;\n\n      const formattedName = name.toUpperCase();\n\n      const existingRole = await this.roleRepository.findOne({\n        where: [{ name: formattedName }],\n      });\n\n      if (existingRole) {\n        throw new BadRequestException(\n          'Nome de role já em uso. Por favor, tente novamente com outros dados.',\n        );\n      }\n\n      const role = this.roleRepository.create({\n        name: formattedName,\n      });\n\n      await this.roleRepository.save(role);\n\n      return {\n        message: 'Role criada com sucesso',\n        role: {\n          name: role.name,\n        },\n      };\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao criar role. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/handlers/role/deleteRole.handler.ts":{"language":"typescript","mutants":[{"id":"479","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":57},"start":{"column":47,"line":26}}},{"id":"480","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":29},"start":{"column":54,"line":29}}},{"id":"481","mutatorName":"BooleanLiteral","replacement":"role","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":31},"start":{"column":9,"line":31}}},{"id":"482","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":31},"start":{"column":9,"line":31}}},{"id":"483","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":31},"start":{"column":9,"line":31}}},{"id":"484","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":33},"start":{"column":16,"line":31}}},{"id":"485","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":32},"start":{"column":35,"line":32}}},{"id":"486","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":37},"start":{"column":58,"line":35}}},{"id":"487","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":36},"start":{"column":14,"line":36}}},{"id":"488","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":36},"start":{"column":22,"line":36}}},{"id":"489","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":39},"start":{"column":9,"line":39}}},{"id":"490","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":39},"start":{"column":9,"line":39}}},{"id":"491","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":43},"start":{"column":21,"line":39}}},{"id":"492","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":41},"start":{"column":9,"line":41}}},{"id":"493","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":48},"start":{"column":9,"line":45}}},{"id":"494","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":47},"start":{"column":14,"line":47}}},{"id":"495","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":47},"start":{"column":25,"line":47}}},{"id":"496","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":56},"start":{"column":21,"line":48}}},{"id":"497","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":50},"start":{"column":9,"line":50}}},{"id":"498","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":90,"line":54},"start":{"column":9,"line":54}}}],"source":"import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteRoleCommand } from 'src/application/commands/role/deleteRole.command';\nimport { Role } from 'src/domain/entities/role.entity';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\n@CommandHandler(DeleteRoleCommand)\nexport class DeleteRoleHandler implements ICommandHandler<DeleteRoleCommand> {\n  constructor(\n    @InjectRepository(Role)\n    private readonly roleRepository: Repository<Role>,\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(\n    command: DeleteRoleCommand,\n  ): Promise<{ message: string; id: string }> {\n    const { id } = command;\n\n    const role = await this.roleRepository.findOneBy({ id });\n\n    if (!role) {\n      throw new NotFoundException('Role não encontrada');\n    }\n\n    const linkedUser = await this.userRepository.findOne({\n      where: { role: { id: id } },\n    });\n\n    if (linkedUser) {\n      throw new ConflictException(\n        'Esta role está vinculada a um usuário e não pode ser excluída.',\n      );\n    }\n\n    try {\n      await this.roleRepository.delete(id);\n      return { message: 'Role deletada com sucesso', id };\n    } catch (error) {\n      console.error(\n        'Erro inesperado ao tentar deletar a role no banco:',\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Ocorreu um erro no servidor ao tentar deletar a role. Detalhe: ${error.message}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/role/getAllRoles.handler.ts":{"language":"typescript","mutants":[{"id":"499","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":21},"start":{"column":36,"line":15}}},{"id":"500","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":18},"start":{"column":9,"line":16}}},{"id":"501","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":20},"start":{"column":13,"line":18}}},{"id":"502","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":19},"start":{"column":37,"line":19}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllRolesQuery } from 'src/application/query/role/getAllRoles.query';\nimport { Role } from 'src/domain/entities/role.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllRolesQuery)\nexport class GetAllRolesHandler implements IQueryHandler<GetAllRolesQuery> {\n  constructor(\n    @InjectRepository(Role)\n    private readonly userRepository: Repository<Role>,\n  ) {}\n\n  async execute(): Promise<Role[]> {\n    try {\n      return await this.userRepository.find();\n    } catch {\n      throw new BadRequestException('Erro ao buscar roles');\n    }\n  }\n}\n"},"src/application/handlers/role/listSpecificRole.handler.ts":{"language":"typescript","mutants":[{"id":"503","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":27},"start":{"column":64,"line":17}}},{"id":"504","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":24},"start":{"column":9,"line":20}}},{"id":"505","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":23},"start":{"column":45,"line":21}}},{"id":"506","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":22},"start":{"column":16,"line":22}}},{"id":"507","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":22},"start":{"column":17,"line":22}}},{"id":"508","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":26},"start":{"column":13,"line":24}}},{"id":"509","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":25},"start":{"column":37,"line":25}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificRoleQuery } from 'src/application/query/role/listSpecificRole.query';\nimport { Role } from 'src/domain/entities/role.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificRoleQuery)\nexport class ListSpecificRoleHandler\n  implements IQueryHandler<ListSpecificRoleQuery>\n{\n  constructor(\n    @InjectRepository(Role)\n    private readonly roleRepository: Repository<Role>,\n  ) {}\n\n  async execute(query: ListSpecificRoleQuery): Promise<Role[]> {\n    const id = query.id;\n\n    try {\n      return await this.roleRepository.find({\n        where: [{ id }],\n      });\n    } catch {\n      throw new BadRequestException('Erro ao buscar role');\n    }\n  }\n}\n"},"src/application/handlers/role/updateRole.handler.ts":{"language":"typescript","mutants":[{"id":"510","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":58},"start":{"column":47,"line":23}}},{"id":"511","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":26},"start":{"column":54,"line":26}}},{"id":"512","mutatorName":"MethodExpression","replacement":"name.toLowerCase()","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":28},"start":{"column":27,"line":28}}},{"id":"513","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":32},"start":{"column":62,"line":30}}},{"id":"514","mutatorName":"BooleanLiteral","replacement":"role","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}}},{"id":"515","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}}},{"id":"516","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":34},"start":{"column":9,"line":34}}},{"id":"517","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":36},"start":{"column":16,"line":34}}},{"id":"518","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":35},"start":{"column":35,"line":35}}},{"id":"519","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":38},"start":{"column":9,"line":38}}},{"id":"520","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":38},"start":{"column":9,"line":38}}},{"id":"521","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":40},"start":{"column":23,"line":38}}},{"id":"522","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":39},"start":{"column":35,"line":39}}},{"id":"523","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":42},"start":{"column":9,"line":42}}},{"id":"524","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":42},"start":{"column":9,"line":42}}},{"id":"525","mutatorName":"EqualityOperator","replacement":"name === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":42},"start":{"column":9,"line":42}}},{"id":"526","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":44},"start":{"column":29,"line":42}}},{"id":"527","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":52},"start":{"column":9,"line":46}}},{"id":"528","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":51},"start":{"column":14,"line":48}}},{"id":"529","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":49},"start":{"column":18,"line":49}}},{"id":"530","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":57},"start":{"column":21,"line":52}}},{"id":"531","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":53},"start":{"column":21,"line":53}}},{"id":"532","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":84,"line":55},"start":{"column":9,"line":55}}},{"id":"533","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":82,"line":55},"start":{"column":46,"line":55}}},{"id":"534","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":82,"line":55},"start":{"column":46,"line":55}}},{"id":"535","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro desconhecido'","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":82,"line":55},"start":{"column":46,"line":55}}},{"id":"536","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":82,"line":55},"start":{"column":63,"line":55}}}],"source":"import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  BadRequestException,\n  NotFoundException,\n  Injectable,\n  ConflictException,\n} from '@nestjs/common';\nimport { UpdateRoleCommand } from 'src/application/commands/role/updateRole.command';\nimport { Role } from 'src/domain/entities/role.entity';\n\n@Injectable()\n@CommandHandler(UpdateRoleCommand)\nexport class UpdateRoleHandler implements ICommandHandler<UpdateRoleCommand> {\n  constructor(\n    @InjectRepository(Role)\n    private readonly roleRepository: Repository<Role>,\n  ) {}\n\n  async execute(\n    command: UpdateRoleCommand,\n  ): Promise<{ message: string; role: Role }> {\n    const { id, name } = command;\n\n    const role = await this.roleRepository.findOneBy({ id });\n\n    const formattedName = name.toUpperCase();\n\n    const existingName = await this.roleRepository.findOneBy({\n      name: formattedName,\n    });\n\n    if (!role) {\n      throw new NotFoundException('Role não encontrada');\n    }\n\n    if (existingName) {\n      throw new ConflictException('Nome já utilizado por outra role');\n    }\n\n    if (name !== undefined) {\n      role.name = formattedName;\n    }\n\n    try {\n      const updatedRole = await this.roleRepository.save(role);\n      return {\n        message: 'Role atualizada com sucesso',\n        role: updatedRole,\n      };\n    } catch (error) {\n      console.error('Erro ao atualizar role:', error);\n      throw new BadRequestException(\n        `Erro ao atualizar role. Detalhes: ${error.message || 'Erro desconhecido'}`,\n      );\n    }\n  }\n}\n"},"src/application/handlers/user/createUser.handler.ts":{"language":"typescript","mutants":[{"id":"555","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":55},"start":{"column":26,"line":55}}},{"id":"537","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"message\": \"Usuário criado com sucesso\", \"user\": {\"cpf\": \"123.456.789-00\", \"email\": \"john.doe@example.com\", \"name\": \"John Doe\"}}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:73:20)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":4,"line":58},"start":{"column":59,"line":16}}},{"id":"538","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"message\": \"Usuário criado com sucesso\", \"user\": {\"cpf\": \"123.456.789-00\", \"email\": \"john.doe@example.com\", \"name\": \"John Doe\"}}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:73:20)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":6,"line":53},"start":{"column":9,"line":17}}},{"id":"539","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n-     Object {\n-       \"cpf\": \"123.456.789-00\",\n-     },\n-   ],\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:82:40)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":8,"line":23},"start":{"column":62,"line":21}}},{"id":"540","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  Object {\n-   \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n-     Object {\n-       \"cpf\": \"123.456.789-00\",\n-     },\n-   ],\n+   \"where\": Array [],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:82:40)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":36,"line":22},"start":{"column":16,"line":22}}},{"id":"541","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  Object {\n    \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n+     Object {},\n      Object {\n        \"cpf\": \"123.456.789-00\",\n      },\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:82:40)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":26,"line":22},"start":{"column":17,"line":22}}},{"id":"542","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  Object {\n    \"where\": Array [\n      Object {\n        \"email\": \"john.doe@example.com\",\n      },\n-     Object {\n-       \"cpf\": \"123.456.789-00\",\n-     },\n+     Object {},\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:82:40)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":35,"line":22},"start":{"column":28,"line":22}}},{"id":"543","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"BadRequestException: Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\n    at CreateUserHandler.execute (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/application/handlers/user/createUser.handler.ts:119:17)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:70:20)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["0"],"coveredBy":["0","1","2"],"location":{"end":{"column":23,"line":25},"start":{"column":11,"line":25}}},{"id":"544","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"message\": \"Usuário criado com sucesso\", \"user\": {\"cpf\": \"123.456.789-00\", \"email\": \"john.doe@example.com\", \"name\": \"John Doe\"}}\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:11)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["1"],"coveredBy":["0","1","2"],"location":{"end":{"column":23,"line":25},"start":{"column":11,"line":25}}},{"id":"545","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\"\nReceived message: \"Cannot read properties of undefined (reading 'name')\"\n\n      117 |         } else {\n      118 |           stryCov_9fa48(\"551\");\n    > 119 |           throw new BadRequestException(stryMutAct_9fa48(\"554\") ? error.message && 'Erro ao criar o usuário. Por favor, tente novamente.' : stryMutAct_9fa48(\"553\") ? false : stryMutAct_9fa48(\"552\") ? true : (stryCov_9fa48(\"552\", \"553\", \"554\"), error.message || (stryMutAct_9fa48(\"555\") ? \"\" : (stryCov_9fa48(\"555\"), 'Erro ao criar o usuário. Por favor, tente novamente.'))));\n          |                 ^\n      120 |         }\n      121 |       }\n      122 |     }\n\n      at CreateUserHandler.execute (src/application/handlers/user/createUser.handler.ts:119:17)\n      at Object.<anonymous> (src/test/user/createUser.handler.spec.ts:111:5)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":8,"line":29},"start":{"column":25,"line":25}}},{"id":"546","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\"\nReceived message: \"Bad Request\"\n\n      117 |         } else {\n      118 |           stryCov_9fa48(\"551\");\n    > 119 |           throw new BadRequestException(stryMutAct_9fa48(\"554\") ? error.message && 'Erro ao criar o usuário. Por favor, tente novamente.' : stryMutAct_9fa48(\"553\") ? false : stryMutAct_9fa48(\"552\") ? true : (stryCov_9fa48(\"552\", \"553\", \"554\"), error.message || (stryMutAct_9fa48(\"555\") ? \"\" : (stryCov_9fa48(\"555\"), 'Erro ao criar o usuário. Por favor, tente novamente.'))));\n          |                 ^\n      120 |         }\n      121 |       }\n      122 |     }\n\n      at CreateUserHandler.execute (src/application/handlers/user/createUser.handler.ts:119:17)\n      at Object.<anonymous> (src/test/user/createUser.handler.spec.ts:111:5)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":87,"line":27},"start":{"column":11,"line":27}}},{"id":"547","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"addressId\": \"uuid-address-123\",\n-   \"cpf\": \"123.456.789-00\",\n-   \"email\": \"john.doe@example.com\",\n-   \"name\": \"John Doe\",\n-   \"password\": \"hashedPassword123\",\n-   \"phone\": \"11999998888\",\n-   \"roleId\": \"uuid-role-123\",\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:86:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["0"],"coveredBy":["0","2"],"location":{"end":{"column":8,"line":41},"start":{"column":47,"line":33}}},{"id":"548","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Object {\n-   \"message\": \"Usuário criado com sucesso\",\n-   \"user\": Object {\n-     \"cpf\": \"123.456.789-00\",\n-     \"email\": \"john.doe@example.com\",\n-     \"name\": \"John Doe\",\n-   },\n- }\n+ Object {}\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:73:20)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":8,"line":52},"start":{"column":14,"line":45}}},{"id":"549","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n@@ -1,7 +1,7 @@\n  Object {\n-   \"message\": \"Usuário criado com sucesso\",\n+   \"message\": \"\",\n    \"user\": Object {\n      \"cpf\": \"123.456.789-00\",\n      \"email\": \"john.doe@example.com\",\n      \"name\": \"John Doe\",\n    },\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:73:20)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":46,"line":46},"start":{"column":18,"line":46}}},{"id":"550","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 1\n\n  Object {\n    \"message\": \"Usuário criado com sucesso\",\n-   \"user\": Object {\n-     \"cpf\": \"123.456.789-00\",\n-     \"email\": \"john.doe@example.com\",\n-     \"name\": \"John Doe\",\n-   },\n+   \"user\": Object {},\n  }\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:73:20)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":10,"line":51},"start":{"column":15,"line":47}}},{"id":"551","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:11)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["1","2"],"location":{"end":{"column":6,"line":57},"start":{"column":21,"line":53}}},{"id":"552","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\"\nReceived message: \"Bad Request Exception\"\n\n      117 |         } else {\n      118 |           stryCov_9fa48(\"551\");\n    > 119 |           throw new BadRequestException(stryMutAct_9fa48(\"554\") ? error.message && 'Erro ao criar o usuário. Por favor, tente novamente.' : stryMutAct_9fa48(\"553\") ? false : stryMutAct_9fa48(\"552\") ? true : (stryCov_9fa48(\"552\", \"553\", \"554\"), error.message || (stryMutAct_9fa48(\"555\") ? \"\" : (stryCov_9fa48(\"555\"), 'Erro ao criar o usuário. Por favor, tente novamente.'))));\n          |                 ^\n      120 |         }\n      121 |       }\n      122 |     }\n\n      at CreateUserHandler.execute (src/application/handlers/user/createUser.handler.ts:119:17)\n      at Object.<anonymous> (src/test/user/createUser.handler.spec.ts:111:5)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["1","2"],"location":{"end":{"column":80,"line":55},"start":{"column":9,"line":55}}},{"id":"553","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\"\nReceived message: \"Bad Request\"\n\n      117 |         } else {\n      118 |           stryCov_9fa48(\"551\");\n    > 119 |           throw new BadRequestException(stryMutAct_9fa48(\"554\") ? error.message && 'Erro ao criar o usuário. Por favor, tente novamente.' : stryMutAct_9fa48(\"553\") ? false : stryMutAct_9fa48(\"552\") ? true : (stryCov_9fa48(\"552\", \"553\", \"554\"), error.message || (stryMutAct_9fa48(\"555\") ? \"\" : (stryCov_9fa48(\"555\"), 'Erro ao criar o usuário. Por favor, tente novamente.'))));\n          |                 ^\n      120 |         }\n      121 |       }\n      122 |     }\n\n      at CreateUserHandler.execute (src/application/handlers/user/createUser.handler.ts:119:17)\n      at Object.<anonymous> (src/test/user/createUser.handler.spec.ts:111:5)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["1","2"],"location":{"end":{"column":80,"line":55},"start":{"column":9,"line":55}}},{"id":"554","mutatorName":"LogicalOperator","replacement":"error.message && 'Erro ao criar o usuário. Por favor, tente novamente.'","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.\"\nReceived message: \"Erro ao criar o usuário. Por favor, tente novamente.\"\n\n      117 |         } else {\n      118 |           stryCov_9fa48(\"551\");\n    > 119 |           throw new BadRequestException(stryMutAct_9fa48(\"554\") ? error.message && 'Erro ao criar o usuário. Por favor, tente novamente.' : stryMutAct_9fa48(\"553\") ? false : stryMutAct_9fa48(\"552\") ? true : (stryCov_9fa48(\"552\", \"553\", \"554\"), error.message || (stryMutAct_9fa48(\"555\") ? \"\" : (stryCov_9fa48(\"555\"), 'Erro ao criar o usuário. Por favor, tente novamente.'))));\n          |                 ^\n      120 |         }\n      121 |       }\n      122 |     }\n\n      at CreateUserHandler.execute (src/application/handlers/user/createUser.handler.ts:119:17)\n      at Object.<anonymous> (src/test/user/createUser.handler.spec.ts:111:5)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/createUser.handler.spec.ts:111:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["1","2"],"location":{"end":{"column":80,"line":55},"start":{"column":9,"line":55}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserCommand } from 'src/application/commands/user/createUser.command';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\n\n@CommandHandler(CreateUserCommand)\nexport class CreateUserHandler implements ICommandHandler<CreateUserCommand> {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(command: CreateUserCommand): Promise<any> {\n    try {\n      const saltRounds = 10;\n      const { name, email, cpf, phone, addressId, password, roleId } = command;\n\n      const existingUser = await this.userRepository.findOne({\n        where: [{ email }, { cpf }],\n      });\n\n      if (existingUser) {\n        throw new BadRequestException(\n          'Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.',\n        );\n      }\n\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n      const user = this.userRepository.create({\n        name,\n        email,\n        cpf,\n        phone,\n        addressId,\n        password: hashedPassword,\n        roleId,\n      });\n\n      await this.userRepository.save(user);\n\n      return {\n        message: 'Usuário criado com sucesso',\n        user: {\n          name: user.name,\n          email: user.email,\n          cpf: user.cpf,\n        },\n      };\n    } catch (error) {\n      throw new BadRequestException(\n        error.message || 'Erro ao criar o usuário. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"},"src/application/query/address/listSpecificAddress.query.ts":{"language":"typescript","mutants":[{"id":"613","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsUUID } from 'class-validator';\n\nexport class ListSpecificAddressQuery {\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/query/doctor/listSpecificDoctor.query.ts":{"language":"typescript","mutants":[{"id":"614","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":27,"line":8}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class ListSpecificDoctorQuery {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/query/nurse/listSpecificNurse.query.ts":{"language":"typescript","mutants":[{"id":"615","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":10},"start":{"column":27,"line":8}}}],"source":"import { IsNotEmpty, IsUUID } from 'class-validator';\n\nexport class ListSpecificNurseQuery {\n  @IsNotEmpty()\n  @IsUUID()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/query/permissions/listSpecificPermission.query.ts":{"language":"typescript","mutants":[{"id":"616","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsString } from 'class-validator';\n\nexport class ListSpecificPermissionQuery {\n  @IsString()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/application/query/role/listSpecificRole.query.ts":{"language":"typescript","mutants":[{"id":"617","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":9},"start":{"column":27,"line":7}}}],"source":"import { IsString } from 'class-validator';\n\nexport class ListSpecificRoleQuery {\n  @IsString()\n  id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n"},"src/infrastructure/commom/validators/user/cpfValidator.ts":{"language":"typescript","mutants":[{"id":"619","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":24},"start":{"column":62,"line":3}}},{"id":"620","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":23},"start":{"column":55,"line":4}}},{"id":"621","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":22},"start":{"column":23,"line":5}}},{"id":"622","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":20,"line":6},"start":{"column":13,"line":6}}},{"id":"623","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":9},"start":{"column":20,"line":9}}},{"id":"624","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":21},"start":{"column":18,"line":11}}},{"id":"625","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":17},"start":{"column":30,"line":12}}},{"id":"626","mutatorName":"BooleanLiteral","replacement":"value","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":13},"start":{"column":15,"line":13}}},{"id":"627","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":13},"start":{"column":15,"line":13}}},{"id":"628","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":13},"start":{"column":15,"line":13}}},{"id":"629","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":13},"start":{"column":30,"line":13}}},{"id":"630","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":20},"start":{"column":26,"line":18}}},{"id":"631","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":19},"start":{"column":18,"line":19}}},{"id":"632","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":56},"start":{"column":51,"line":27}}},{"id":"633","mutatorName":"Regex","replacement":"/\\d/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":26,"line":29},"start":{"column":21,"line":29}}},{"id":"634","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":29},"start":{"column":28,"line":29}}},{"id":"635","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":32},"start":{"column":7,"line":32}}},{"id":"636","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":32},"start":{"column":7,"line":32}}},{"id":"637","mutatorName":"EqualityOperator","replacement":"cpf.length === 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":32},"start":{"column":7,"line":32}}},{"id":"638","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":32},"start":{"column":33,"line":32}}},{"id":"639","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":35},"start":{"column":7,"line":35}}},{"id":"640","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":35},"start":{"column":7,"line":35}}},{"id":"641","mutatorName":"Regex","replacement":"/(\\d)\\1{10}$/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":35},"start":{"column":7,"line":35}}},{"id":"642","mutatorName":"Regex","replacement":"/^(\\d)\\1{10}/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":35},"start":{"column":7,"line":35}}},{"id":"643","mutatorName":"Regex","replacement":"/^(\\D)\\1{10}$/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":35},"start":{"column":7,"line":35}}},{"id":"644","mutatorName":"Regex","replacement":"/^(\\d)\\1$/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":35},"start":{"column":7,"line":35}}},{"id":"645","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":35},"start":{"column":40,"line":35}}},{"id":"646","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":39},"start":{"column":19,"line":39}}},{"id":"647","mutatorName":"EqualityOperator","replacement":"i <= 9","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":39},"start":{"column":19,"line":39}}},{"id":"648","mutatorName":"EqualityOperator","replacement":"i >= 9","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":39},"start":{"column":19,"line":39}}},{"id":"649","mutatorName":"UpdateOperator","replacement":"i--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":39},"start":{"column":26,"line":39}}},{"id":"650","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":41},"start":{"column":31,"line":39}}},{"id":"651","mutatorName":"AssignmentOperator","replacement":"sum -= parseInt(cpf.charAt(i)) * (10 - i)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":40},"start":{"column":5,"line":40}}},{"id":"652","mutatorName":"ArithmeticOperator","replacement":"parseInt(cpf.charAt(i)) / (10 - i)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":40},"start":{"column":12,"line":40}}},{"id":"653","mutatorName":"MethodExpression","replacement":"cpf","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":40},"start":{"column":21,"line":40}}},{"id":"654","mutatorName":"ArithmeticOperator","replacement":"10 + i","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":40},"start":{"column":39,"line":40}}},{"id":"655","mutatorName":"ArithmeticOperator","replacement":"11 + sum % 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":42},"start":{"column":25,"line":42}}},{"id":"656","mutatorName":"ArithmeticOperator","replacement":"sum * 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":42},"start":{"column":31,"line":42}}},{"id":"657","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":43},"start":{"column":7,"line":43}}},{"id":"658","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":43},"start":{"column":7,"line":43}}},{"id":"659","mutatorName":"LogicalOperator","replacement":"firstCheckDigit === 10 && firstCheckDigit === 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":43},"start":{"column":7,"line":43}}},{"id":"660","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":43},"start":{"column":7,"line":43}}},{"id":"661","mutatorName":"EqualityOperator","replacement":"firstCheckDigit !== 10","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":43},"start":{"column":7,"line":43}}},{"id":"662","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":43},"start":{"column":33,"line":43}}},{"id":"663","mutatorName":"EqualityOperator","replacement":"firstCheckDigit !== 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":43},"start":{"column":33,"line":43}}},{"id":"664","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":44},"start":{"column":7,"line":44}}},{"id":"665","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":44},"start":{"column":7,"line":44}}},{"id":"666","mutatorName":"EqualityOperator","replacement":"firstCheckDigit === parseInt(cpf.charAt(9))","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":44},"start":{"column":7,"line":44}}},{"id":"667","mutatorName":"MethodExpression","replacement":"cpf","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":44},"start":{"column":36,"line":44}}},{"id":"668","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":64,"line":44},"start":{"column":59,"line":44}}},{"id":"669","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":48},"start":{"column":19,"line":48}}},{"id":"670","mutatorName":"EqualityOperator","replacement":"i <= 10","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":48},"start":{"column":19,"line":48}}},{"id":"671","mutatorName":"EqualityOperator","replacement":"i >= 10","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":48},"start":{"column":19,"line":48}}},{"id":"672","mutatorName":"UpdateOperator","replacement":"i--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":48},"start":{"column":27,"line":48}}},{"id":"673","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":50},"start":{"column":32,"line":48}}},{"id":"674","mutatorName":"AssignmentOperator","replacement":"sum -= parseInt(cpf.charAt(i)) * (11 - i)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":49},"start":{"column":5,"line":49}}},{"id":"675","mutatorName":"ArithmeticOperator","replacement":"parseInt(cpf.charAt(i)) / (11 - i)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":49},"start":{"column":12,"line":49}}},{"id":"676","mutatorName":"MethodExpression","replacement":"cpf","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":49},"start":{"column":21,"line":49}}},{"id":"677","mutatorName":"ArithmeticOperator","replacement":"11 + i","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":49},"start":{"column":39,"line":49}}},{"id":"678","mutatorName":"ArithmeticOperator","replacement":"11 + sum % 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":51},"start":{"column":26,"line":51}}},{"id":"679","mutatorName":"ArithmeticOperator","replacement":"sum * 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":51},"start":{"column":32,"line":51}}},{"id":"680","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":52},"start":{"column":7,"line":52}}},{"id":"681","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":52},"start":{"column":7,"line":52}}},{"id":"682","mutatorName":"LogicalOperator","replacement":"secondCheckDigit === 10 && secondCheckDigit === 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":52},"start":{"column":7,"line":52}}},{"id":"683","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":52},"start":{"column":7,"line":52}}},{"id":"684","mutatorName":"EqualityOperator","replacement":"secondCheckDigit !== 10","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":52},"start":{"column":7,"line":52}}},{"id":"685","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":52},"start":{"column":34,"line":52}}},{"id":"686","mutatorName":"EqualityOperator","replacement":"secondCheckDigit !== 11","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":52},"start":{"column":34,"line":52}}},{"id":"687","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":53},"start":{"column":7,"line":53}}},{"id":"688","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":53},"start":{"column":7,"line":53}}},{"id":"689","mutatorName":"EqualityOperator","replacement":"secondCheckDigit === parseInt(cpf.charAt(10))","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":53},"start":{"column":7,"line":53}}},{"id":"690","mutatorName":"MethodExpression","replacement":"cpf","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":53},"start":{"column":37,"line":53}}},{"id":"691","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":53},"start":{"column":61,"line":53}}},{"id":"692","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":55},"start":{"column":10,"line":55}}}],"source":"import { registerDecorator, ValidationOptions } from 'class-validator';\n\nexport function IsCPF(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      name: 'isCPF',\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [],\n      options: validationOptions,\n      validator: {\n        validate(value: any) {\n          if (!value) return false;\n\n          // Função de validação do CPF real\n          return validateCPF(value);\n        },\n        defaultMessage() {\n          return 'O CPF fornecido não é válido.';\n        },\n      },\n    });\n  };\n}\n\n// Função para validar CPF (com verificação dos dígitos verificadores)\nexport function validateCPF(cpf: string): boolean {\n  // Remove caracteres não numéricos\n  cpf = cpf.replace(/\\D/g, '');\n\n  // Verifica se o CPF tem 11 dígitos\n  if (cpf.length !== 11) return false;\n\n  // Valida se todos os números são iguais (ex: 111.111.111-11)\n  if (/^(\\d)\\1{10}$/.test(cpf)) return false;\n\n  // Cálculo do primeiro dígito verificador\n  let sum = 0;\n  for (let i = 0; i < 9; i++) {\n    sum += parseInt(cpf.charAt(i)) * (10 - i);\n  }\n  let firstCheckDigit = 11 - (sum % 11);\n  if (firstCheckDigit === 10 || firstCheckDigit === 11) firstCheckDigit = 0;\n  if (firstCheckDigit !== parseInt(cpf.charAt(9))) return false;\n\n  // Cálculo do segundo dígito verificador\n  sum = 0;\n  for (let i = 0; i < 10; i++) {\n    sum += parseInt(cpf.charAt(i)) * (11 - i);\n  }\n  let secondCheckDigit = 11 - (sum % 11);\n  if (secondCheckDigit === 10 || secondCheckDigit === 11) secondCheckDigit = 0;\n  if (secondCheckDigit !== parseInt(cpf.charAt(10))) return false;\n\n  return true;\n}\n"},"src/application/commands/user/deleteUser.command.ts":{"language":"typescript","mutants":[{"id":"37","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n-   \"email\": \"john.doe@example.com\",\n+   \"email\": undefined,\n    \"message\": \"Usuário deletado com sucesso\",\n  }\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:62:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":4,"line":9},"start":{"column":30,"line":7}}}],"source":"import { IsEmail } from 'class-validator';\n\nexport class DeleteUserCommand {\n  @IsEmail()\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n"},"src/application/handlers/user/deleteUser.handler.ts":{"language":"typescript","mutants":[{"id":"556","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"email\": \"john.doe@example.com\", \"message\": \"Usuário deletado com sucesso\"}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:62:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":4,"line":34},"start":{"column":59,"line":15}}},{"id":"557","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"email\": \"john.doe@example.com\", \"message\": \"Usuário deletado com sucesso\"}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:62:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":6,"line":28},"start":{"column":9,"line":18}}},{"id":"558","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"email\": \"john.doe@example.com\",\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:65:44)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":65,"line":19},"start":{"column":56,"line":19}}},{"id":"559","mutatorName":"BooleanLiteral","replacement":"user","statusReason":"NotFoundException: Usuário não encontrado\n    at DeleteUserHandler.execute (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/application/handlers/user/deleteUser.handler.ts:77:21)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:60:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":16,"line":21},"start":{"column":11,"line":21}}},{"id":"560","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NotFoundException: Usuário não encontrado\n    at DeleteUserHandler.execute (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/application/handlers/user/deleteUser.handler.ts:77:21)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:60:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["15"],"coveredBy":["15","16","17"],"location":{"end":{"column":16,"line":21},"start":{"column":11,"line":21}}},{"id":"561","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"email\": \"not.found@example.com\", \"message\": \"Usuário deletado com sucesso\"}\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["16"],"coveredBy":["15","16","17"],"location":{"end":{"column":16,"line":21},"start":{"column":11,"line":21}}},{"id":"562","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: {\"email\": \"not.found@example.com\", \"message\": \"Usuário deletado com sucesso\"}\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":8,"line":23},"start":{"column":18,"line":21}}},{"id":"563","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Not Found\"\n\n      75 |             } else {\n      76 |               stryCov_9fa48(\"562\");\n    > 77 |               throw new NotFoundException(stryMutAct_9fa48(\"563\") ? \"\" : (stryCov_9fa48(\"563\"), 'Usuário não encontrado'));\n         |                     ^\n      78 |             }\n      79 |           }\n      80 |           await this.userRepository.delete(stryMutAct_9fa48(\"564\") ? {} : (stryCov_9fa48(\"564\"), {\n\n      at DeleteUserHandler.execute (src/application/handlers/user/deleteUser.handler.ts:77:21)\n      at Object.<anonymous> (src/test/user/deleteUser.handler.spec.ts:80:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":61,"line":22},"start":{"column":37,"line":22}}},{"id":"564","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"email\": \"john.doe@example.com\",\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:70:41)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["15"],"coveredBy":["15","17"],"location":{"end":{"column":49,"line":25},"start":{"column":40,"line":25}}},{"id":"565","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 4\n+ Received  + 1\n\n- Object {\n-   \"email\": \"john.doe@example.com\",\n-   \"message\": \"Usuário deletado com sucesso\",\n- }\n+ Object {}\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:62:22)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":64,"line":27},"start":{"column":14,"line":27}}},{"id":"566","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"email\": \"john.doe@example.com\",\n-   \"message\": \"Usuário deletado com sucesso\",\n+   \"message\": \"\",\n  }\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:62:22)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":55,"line":27},"start":{"column":25,"line":27}}},{"id":"567","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":6,"line":33},"start":{"column":21,"line":28}}},{"id":"568","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Erro ao deletar usuário\"\nReceived message: \"Database error\"\n\n      88 |\n      89 |       mockUserRepository.findOneBy.mockResolvedValue(mockUser);\n    > 90 |       mockUserRepository.delete.mockRejectedValue(new Error('Database error'));\n         |                                                   ^\n      91 |\n      92 |       await expect(handler.execute(command)).rejects.toThrow(\n      93 |         new BadRequestException('Erro ao deletar usuário'),\n\n      at Object.<anonymous> (src/test/user/deleteUser.handler.spec.ts:90:51)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:92:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["17"],"coveredBy":["16","17"],"location":{"end":{"column":45,"line":29},"start":{"column":11,"line":29}}},{"id":"569","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Erro ao deletar usuário\"\n\n       99 |             }\n      100 |           }\n    > 101 |           throw new BadRequestException(stryMutAct_9fa48(\"571\") ? \"\" : (stryCov_9fa48(\"571\"), 'Erro ao deletar usuário'));\n          |                 ^\n      102 |         }\n      103 |       }\n      104 |     }\n\n      at DeleteUserHandler.execute (src/application/handlers/user/deleteUser.handler.ts:101:17)\n      at Object.<anonymous> (src/test/user/deleteUser.handler.spec.ts:80:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":45,"line":29},"start":{"column":11,"line":29}}},{"id":"571","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Erro ao deletar usuário\"\nReceived message: \"Bad Request\"\n\n       99 |             }\n      100 |           }\n    > 101 |           throw new BadRequestException(stryMutAct_9fa48(\"571\") ? \"\" : (stryCov_9fa48(\"571\"), 'Erro ao deletar usuário'));\n          |                 ^\n      102 |         }\n      103 |       }\n      104 |     }\n\n      at DeleteUserHandler.execute (src/application/handlers/user/deleteUser.handler.ts:101:17)\n      at Object.<anonymous> (src/test/user/deleteUser.handler.spec.ts:92:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:92:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":62,"line":32},"start":{"column":37,"line":32}}},{"id":"570","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Erro ao deletar usuário\"\n\n       99 |             }\n      100 |           }\n    > 101 |           throw new BadRequestException(stryMutAct_9fa48(\"571\") ? \"\" : (stryCov_9fa48(\"571\"), 'Erro ao deletar usuário'));\n          |                 ^\n      102 |         }\n      103 |       }\n      104 |     }\n\n      at DeleteUserHandler.execute (src/application/handlers/user/deleteUser.handler.ts:101:17)\n      at Object.<anonymous> (src/test/user/deleteUser.handler.spec.ts:80:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/deleteUser.handler.spec.ts:80:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":8,"line":31},"start":{"column":47,"line":29}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteUserCommand } from 'src/application/commands/user/deleteUser.command';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@CommandHandler(DeleteUserCommand)\nexport class DeleteUserHandler implements ICommandHandler<DeleteUserCommand> {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(command: DeleteUserCommand): Promise<any> {\n    const email = command.email;\n\n    try {\n      const user = await this.userRepository.findOneBy({ email });\n\n      if (!user) {\n        throw new NotFoundException('Usuário não encontrado');\n      }\n\n      await this.userRepository.delete({ email });\n\n      return { message: 'Usuário deletado com sucesso', email };\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new BadRequestException('Erro ao deletar usuário');\n    }\n  }\n}\n"},"src/application/handlers/user/getAllUsers.handler.ts":{"language":"typescript","mutants":[{"id":"573","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"email\": \"joao.silva@example.com\", \"isActive\": true, \"name\": \"João da Silva\", \"phone\": \"11999998888\"}, {\"email\": \"maria.oliveira@example.com\", \"isActive\": true, \"name\": \"Maria Oliveira\", \"phone\": \"21888887777\"}]\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:70:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":6,"line":21},"start":{"column":9,"line":16}}},{"id":"572","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"email\": \"joao.silva@example.com\", \"isActive\": true, \"name\": \"João da Silva\", \"phone\": \"11999998888\"}, {\"email\": \"maria.oliveira@example.com\", \"isActive\": true, \"name\": \"Maria Oliveira\", \"phone\": \"21888887777\"}]\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:70:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":4,"line":24},"start":{"column":60,"line":15}}},{"id":"575","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  Object {\n    \"relations\": Array [\n      \"address\",\n      \"role\",\n    ],\n-   \"select\": Array [\n-     \"id\",\n-     \"name\",\n-     \"email\",\n-     \"phone\",\n-     \"isActive\",\n-   ],\n+   \"select\": Array [],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":61,"line":18},"start":{"column":17,"line":18}}},{"id":"574","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"relations\": Array [\n-     \"address\",\n-     \"role\",\n-   ],\n-   \"select\": Array [\n-     \"id\",\n-     \"name\",\n-     \"email\",\n-     \"phone\",\n-     \"isActive\",\n-   ],\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":8,"line":20},"start":{"column":45,"line":17}}},{"id":"576","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -2,11 +2,11 @@\n    \"relations\": Array [\n      \"address\",\n      \"role\",\n    ],\n    \"select\": Array [\n-     \"id\",\n+     \"\",\n      \"name\",\n      \"email\",\n      \"phone\",\n      \"isActive\",\n    ],,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":22,"line":18},"start":{"column":18,"line":18}}},{"id":"577","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -3,11 +3,11 @@\n      \"address\",\n      \"role\",\n    ],\n    \"select\": Array [\n      \"id\",\n-     \"name\",\n+     \"\",\n      \"email\",\n      \"phone\",\n      \"isActive\",\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":30,"line":18},"start":{"column":24,"line":18}}},{"id":"578","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -4,10 +4,10 @@\n      \"role\",\n    ],\n    \"select\": Array [\n      \"id\",\n      \"name\",\n-     \"email\",\n+     \"\",\n      \"phone\",\n      \"isActive\",\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":39,"line":18},"start":{"column":32,"line":18}}},{"id":"579","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -5,9 +5,9 @@\n    ],\n    \"select\": Array [\n      \"id\",\n      \"name\",\n      \"email\",\n-     \"phone\",\n+     \"\",\n      \"isActive\",\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":48,"line":18},"start":{"column":41,"line":18}}},{"id":"580","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -6,8 +6,8 @@\n    \"select\": Array [\n      \"id\",\n      \"name\",\n      \"email\",\n      \"phone\",\n-     \"isActive\",\n+     \"\",\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":60,"line":18},"start":{"column":50,"line":18}}},{"id":"581","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,10 +1,7 @@\n  Object {\n-   \"relations\": Array [\n-     \"address\",\n-     \"role\",\n-   ],\n+   \"relations\": Array [],\n    \"select\": Array [\n      \"id\",\n      \"name\",\n      \"email\",\n      \"phone\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":39,"line":19},"start":{"column":20,"line":19}}},{"id":"582","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,8 +1,8 @@\n  Object {\n    \"relations\": Array [\n-     \"address\",\n+     \"\",\n      \"role\",\n    ],\n    \"select\": Array [\n      \"id\",\n      \"name\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":30,"line":19},"start":{"column":21,"line":19}}},{"id":"583","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,9 +1,9 @@\n  Object {\n    \"relations\": Array [\n      \"address\",\n-     \"role\",\n+     \"\",\n    ],\n    \"select\": Array [\n      \"id\",\n      \"name\",\n      \"email\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:74:39)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":38,"line":19},"start":{"column":32,"line":19}}},{"id":"584","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:89:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":6,"line":23},"start":{"column":21,"line":21}}},{"id":"585","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected substring: \"Erro ao buscar usuários\"\nReceived message:   \"Bad Request\"\n\n      76 |         } else {\n      77 |           stryCov_9fa48(\"584\");\n    > 78 |           throw new BadRequestException(stryMutAct_9fa48(\"585\") ? \"\" : (stryCov_9fa48(\"585\"), 'Erro ao buscar usuários'));\n         |                 ^\n      79 |         }\n      80 |       }\n      81 |     }\n\n      at GetAllUsersHandler.execute (src/application/handlers/user/getAllUsers.handler.ts:78:17)\n      at Object.<anonymous> (src/test/user/getAllUsers.handler.spec.ts:89:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/getAllUsers.handler.spec.ts:89:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13"],"location":{"end":{"column":62,"line":22},"start":{"column":37,"line":22}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetAllUsersQuery } from 'src/application/query/user/getAllUsers.query';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(GetAllUsersQuery)\nexport class GetAllUsersHandler implements IQueryHandler<GetAllUsersQuery> {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(_query: GetAllUsersQuery): Promise<User[]> {\n    try {\n      return await this.userRepository.find({\n        select: ['id', 'name', 'email', 'phone', 'isActive'],\n        relations: ['address', 'role'],\n      });\n    } catch (error) {\n      throw new BadRequestException('Erro ao buscar usuários');\n    }\n  }\n}\n"},"src/application/handlers/user/listSpecificUser.handler.ts":{"language":"typescript","mutants":[{"id":"587","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"email\": \"joao.silva@example.com\", \"isActive\": true, \"name\": \"João da Silva\", \"phone\": \"11999998888\"}, {\"email\": \"maria.oliveira@example.com\", \"isActive\": true, \"name\": \"Maria Oliveira\", \"phone\": \"21888887777\"}]\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:71:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":6,"line":26},"start":{"column":9,"line":20}}},{"id":"586","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: [{\"email\": \"joao.silva@example.com\", \"isActive\": true, \"name\": \"João da Silva\", \"phone\": \"11999998888\"}, {\"email\": \"maria.oliveira@example.com\", \"isActive\": true, \"name\": \"Maria Oliveira\", \"phone\": \"21888887777\"}]\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:71:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":4,"line":29},"start":{"column":64,"line":17}}},{"id":"588","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"relations\": Array [\n-     \"address\",\n-     \"role\",\n-   ],\n-   \"select\": Array [\n-     \"name\",\n-     \"email\",\n-     \"phone\",\n-     \"isActive\",\n-   ],\n-   \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n-   ],\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":8,"line":25},"start":{"column":45,"line":21}}},{"id":"589","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,16 +1,11 @@\n  Object {\n    \"relations\": Array [\n      \"address\",\n      \"role\",\n    ],\n-   \"select\": Array [\n-     \"name\",\n-     \"email\",\n-     \"phone\",\n-     \"isActive\",\n-   ],\n+   \"select\": Array [],\n    \"where\": Array [\n      Object {\n        \"email\": \"john.doe@example.com\",\n      },\n    ],,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":55,"line":22},"start":{"column":17,"line":22}}},{"id":"591","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -3,11 +3,11 @@\n      \"address\",\n      \"role\",\n    ],\n    \"select\": Array [\n      \"name\",\n-     \"email\",\n+     \"\",\n      \"phone\",\n      \"isActive\",\n    ],\n    \"where\": Array [\n      Object {,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":33,"line":22},"start":{"column":26,"line":22}}},{"id":"590","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -2,11 +2,11 @@\n    \"relations\": Array [\n      \"address\",\n      \"role\",\n    ],\n    \"select\": Array [\n-     \"name\",\n+     \"\",\n      \"email\",\n      \"phone\",\n      \"isActive\",\n    ],\n    \"where\": Array [,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":24,"line":22},"start":{"column":18,"line":22}}},{"id":"592","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -4,11 +4,11 @@\n      \"role\",\n    ],\n    \"select\": Array [\n      \"name\",\n      \"email\",\n-     \"phone\",\n+     \"\",\n      \"isActive\",\n    ],\n    \"where\": Array [\n      Object {\n        \"email\": \"john.doe@example.com\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":42,"line":22},"start":{"column":35,"line":22}}},{"id":"593","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -5,11 +5,11 @@\n    ],\n    \"select\": Array [\n      \"name\",\n      \"email\",\n      \"phone\",\n-     \"isActive\",\n+     \"\",\n    ],\n    \"where\": Array [\n      Object {\n        \"email\": \"john.doe@example.com\",\n      },,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":54,"line":22},"start":{"column":44,"line":22}}},{"id":"594","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,10 +1,7 @@\n  Object {\n-   \"relations\": Array [\n-     \"address\",\n-     \"role\",\n-   ],\n+   \"relations\": Array [],\n    \"select\": Array [\n      \"name\",\n      \"email\",\n      \"phone\",\n      \"isActive\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":39,"line":23},"start":{"column":20,"line":23}}},{"id":"595","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,8 +1,8 @@\n  Object {\n    \"relations\": Array [\n-     \"address\",\n+     \"\",\n      \"role\",\n    ],\n    \"select\": Array [\n      \"name\",\n      \"email\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":30,"line":23},"start":{"column":21,"line":23}}},{"id":"596","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -1,9 +1,9 @@\n  Object {\n    \"relations\": Array [\n      \"address\",\n-     \"role\",\n+     \"\",\n    ],\n    \"select\": Array [\n      \"name\",\n      \"email\",\n      \"phone\",,\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":38,"line":23},"start":{"column":32,"line":23}}},{"id":"597","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -7,11 +7,7 @@\n      \"name\",\n      \"email\",\n      \"phone\",\n      \"isActive\",\n    ],\n-   \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n-   ],\n+   \"where\": Array [],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":27,"line":24},"start":{"column":16,"line":24}}},{"id":"598","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -8,10 +8,8 @@\n      \"email\",\n      \"phone\",\n      \"isActive\",\n    ],\n    \"where\": Array [\n-     Object {\n-       \"email\": \"john.doe@example.com\",\n-     },\n+     Object {},\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":26,"line":24},"start":{"column":17,"line":24}}},{"id":"599","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:105:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":6,"line":28},"start":{"column":13,"line":26}}},{"id":"600","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Erro ao buscar usuários\"\nReceived message: \"Bad Request\"\n\n      80 |         } else {\n      81 |           stryCov_9fa48(\"599\");\n    > 82 |           throw new BadRequestException(stryMutAct_9fa48(\"600\") ? \"\" : (stryCov_9fa48(\"600\"), 'Erro ao buscar usuários'));\n         |                 ^\n      83 |         }\n      84 |       }\n      85 |     }\n\n      at ListSpecificUserHandler.execute (src/application/handlers/user/listSpecificUser.handler.ts:82:17)\n      at Object.<anonymous> (src/test/user/listSpecificUser.handler.spec.ts:105:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:105:52)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":62,"line":27},"start":{"column":37,"line":27}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ListSpecificUserQuery } from 'src/application/query/user/listSpecificUser.query';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n@QueryHandler(ListSpecificUserQuery)\nexport class ListSpecificUserHandler\n  implements IQueryHandler<ListSpecificUserQuery>\n{\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(query: ListSpecificUserQuery): Promise<User[]> {\n    const email = query.email;\n\n    try {\n      return await this.userRepository.find({\n        select: ['name', 'email', 'phone', 'isActive'],\n        relations: ['address', 'role'],\n        where: [{ email }],\n      });\n    } catch {\n      throw new BadRequestException('Erro ao buscar usuários');\n    }\n  }\n}\n"},"src/application/handlers/user/updateUser.handler.ts":{"language":"typescript","mutants":[{"id":"601","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"message\": \"Usuário atualizado com sucesso\", \"user\": {\"email\": \"john1.doe@example.com\", \"isActive\": true, \"name\": \"Lucas Dogo\", \"phone\": \"11999998888\"}}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:75:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["8"],"coveredBy":["8","9","10"],"location":{"end":{"column":4,"line":32},"start":{"column":59,"line":15}}},{"id":"602","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- Object {\n-   \"email\": \"john.doe@example.com\",\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:78:44)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["8"],"coveredBy":["8","9","10"],"location":{"end":{"column":63,"line":18},"start":{"column":54,"line":18}}},{"id":"603","mutatorName":"BooleanLiteral","replacement":"user","statusReason":"NotFoundException: Usuário não encontrado\n    at UpdateUserHandler.execute (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/application/handlers/user/updateUser.handler.ts:75:17)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:73:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["8"],"coveredBy":["8","9","10"],"location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}}},{"id":"605","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Cannot convert undefined or null to object\"\n\n      76 |         }\n      77 |       }\n    > 78 |       Object.assign(user, updateData);\n         |              ^\n      79 |       try {\n      80 |         if (stryMutAct_9fa48(\"608\")) {\n      81 |           {}\n\n      at UpdateUserHandler.execute (src/application/handlers/user/updateUser.handler.ts:78:14)\n      at Object.<anonymous> (src/test/user/updateUser.handler.spec.ts:94:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:94:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["9"],"coveredBy":["8","9","10"],"location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}}},{"id":"604","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"NotFoundException: Usuário não encontrado\n    at UpdateUserHandler.execute (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/application/handlers/user/updateUser.handler.ts:75:17)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:73:22)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["8"],"coveredBy":["8","9","10"],"location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}}},{"id":"606","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Cannot convert undefined or null to object\"\n\n      76 |         }\n      77 |       }\n    > 78 |       Object.assign(user, updateData);\n         |              ^\n      79 |       try {\n      80 |         if (stryMutAct_9fa48(\"608\")) {\n      81 |           {}\n\n      at UpdateUserHandler.execute (src/application/handlers/user/updateUser.handler.ts:78:14)\n      at Object.<anonymous> (src/test/user/updateUser.handler.spec.ts:94:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:94:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":6,"line":22},"start":{"column":16,"line":20}}},{"id":"607","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Usuário não encontrado\"\nReceived message: \"Not Found\"\n\n      73 |         } else {\n      74 |           stryCov_9fa48(\"606\");\n    > 75 |           throw new NotFoundException(stryMutAct_9fa48(\"607\") ? \"\" : (stryCov_9fa48(\"607\"), 'Usuário não encontrado'));\n         |                 ^\n      76 |         }\n      77 |       }\n      78 |       Object.assign(user, updateData);\n\n      at UpdateUserHandler.execute (src/application/handlers/user/updateUser.handler.ts:75:17)\n      at Object.<anonymous> (src/test/user/updateUser.handler.spec.ts:94:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:94:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":59,"line":21},"start":{"column":35,"line":21}}},{"id":"608","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"message\": \"Usuário atualizado com sucesso\", \"user\": {\"email\": \"john1.doe@example.com\", \"isActive\": true, \"name\": \"Lucas Dogo\", \"phone\": \"11999998888\"}}\nReceived: undefined\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:75:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["8","10"],"location":{"end":{"column":6,"line":29},"start":{"column":9,"line":26}}},{"id":"609","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 9\n+ Received  + 1\n\n- Object {\n-   \"message\": \"Usuário atualizado com sucesso\",\n-   \"user\": Object {\n-     \"email\": \"john1.doe@example.com\",\n-     \"isActive\": true,\n-     \"name\": \"Lucas Dogo\",\n-     \"phone\": \"11999998888\",\n-   },\n- }\n+ Object {}\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:75:22)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":65,"line":28},"start":{"column":14,"line":28}}},{"id":"611","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).rejects.toThrow()\n\nReceived promise resolved instead of rejected\nResolved to value: undefined\n    at expect (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:106:13)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":6,"line":31},"start":{"column":21,"line":29}}},{"id":"610","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n@@ -1,7 +1,7 @@\n  Object {\n-   \"message\": \"Usuário atualizado com sucesso\",\n+   \"message\": \"\",\n    \"user\": Object {\n      \"email\": \"john1.doe@example.com\",\n      \"isActive\": true,\n      \"name\": \"Lucas Dogo\",\n      \"phone\": \"11999998888\",\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:75:22)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["8"],"coveredBy":["8"],"location":{"end":{"column":57,"line":28},"start":{"column":25,"line":28}}},{"id":"612","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).rejects.toThrow(expected)\n\nExpected message: \"Erro ao atualizar usuário\"\nReceived message: \"Bad Request\"\n\n      93 |         } else {\n      94 |           stryCov_9fa48(\"611\");\n    > 95 |           throw new BadRequestException(stryMutAct_9fa48(\"612\") ? \"\" : (stryCov_9fa48(\"612\"), 'Erro ao atualizar usuário'));\n         |                 ^\n      96 |         }\n      97 |       }\n      98 |     }\n\n      at UpdateUserHandler.execute (src/application/handlers/user/updateUser.handler.ts:95:17)\n      at Object.<anonymous> (src/test/user/updateUser.handler.spec.ts:106:7)\n    at Object.toThrow (/home/lucas/Repositorios/senior-care/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/updateUser.handler.spec.ts:106:54)\n    at Promise.then.completed (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/lucas/Repositorios/senior-care/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/lucas/Repositorios/senior-care/node_modules/jest-runner/build/runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":64,"line":30},"start":{"column":37,"line":30}}}],"source":"import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/domain/entities/user.entity';\nimport { UpdateUserCommand } from 'src/application/commands/user/updateUser.command';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\n\n@CommandHandler(UpdateUserCommand)\nexport class UpdateUserHandler implements ICommandHandler<UpdateUserCommand> {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  async execute(command: UpdateUserCommand): Promise<any> {\n    const { email, updateData } = command;\n\n    const user = await this.userRepository.findOneBy({ email });\n\n    if (!user) {\n      throw new NotFoundException('Usuário não encontrado');\n    }\n\n    Object.assign(user, updateData);\n\n    try {\n      await this.userRepository.save(user);\n      return { message: 'Usuário atualizado com sucesso', user };\n    } catch (error) {\n      throw new BadRequestException('Erro ao atualizar usuário');\n    }\n  }\n}\n"},"src/application/query/user/listSpecificUser.query.ts":{"language":"typescript","mutants":[{"id":"618","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n@@ -9,9 +9,9 @@\n      \"phone\",\n      \"isActive\",\n    ],\n    \"where\": Array [\n      Object {\n-       \"email\": \"john.doe@example.com\",\n+       \"email\": undefined,\n      },\n    ],\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (/home/lucas/Repositorios/senior-care/.stryker-tmp/sandbox-uPGjb8/src/test/user/listSpecificUser.handler.spec.ts:75:39)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["4"],"coveredBy":["4","5","6"],"location":{"end":{"column":4,"line":9},"start":{"column":30,"line":7}}}],"source":"import { IsEmail } from 'class-validator';\n\nexport class ListSpecificUserQuery {\n  @IsEmail()\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":70},"testFiles":{"src/test/user/createUser.handler.spec.ts":{"tests":[{"id":"0","name":"CreateUserHandler deve criar e salvar um novo usuário com sucesso","location":{"start":{"column":4,"line":43}}},{"id":"1","name":"CreateUserHandler deve lançar uma BadRequestException se o email ou CPF já estiver em uso","location":{"start":{"column":4,"line":93}}},{"id":"2","name":"CreateUserHandler deve lançar uma BadRequestException se ocorrer um erro durante o processo","location":{"start":{"column":4,"line":123}}}],"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { CreateUserHandler } from 'src/application/handlers/user/createUser.handler';\nimport { CreateUserCommand } from 'src/application/commands/user/createUser.command';\nimport { User } from 'src/domain/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { BadRequestException } from '@nestjs/common';\n\njest.mock('bcrypt', () => ({\n  hash: jest.fn(),\n}));\n\ndescribe('CreateUserHandler', () => {\n  let handler: CreateUserHandler;\n\n  const mockUserRepository = {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    // Reseta os mocks antes de cada teste para garantir a independência dos testes\n    jest.clearAllMocks();\n\n    // Cria um módulo de teste do NestJS\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CreateUserHandler,\n        {\n          // Fornece o mock no lugar do repositório real\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository,\n        },\n      ],\n    }).compile();\n\n    // Obtém a instância do handler\n    handler = module.get<CreateUserHandler>(CreateUserHandler);\n  });\n\n  // Teste 1: O \"caminho feliz\" (happy path)\n  it('deve criar e salvar um novo usuário com sucesso', async () => {\n    // Arrange (Organização)\n    const command = new CreateUserCommand(\n      'John Doe',\n      'john.doe@example.com',\n      '123.456.789-00',\n      '11999998888',\n      'uuid-address-123',\n      'StrongPassword123!',\n      'uuid-role-123',\n    );\n\n    const hashedPassword = 'hashedPassword123';\n    const userEntity = {\n      ...command,\n      id: 'uuid-user-123',\n      password: hashedPassword,\n    };\n\n    // Configuração dos mocks para este cenário\n    (bcrypt.hash as jest.Mock).mockResolvedValue(hashedPassword);\n    mockUserRepository.findOne.mockResolvedValue(null); // Nenhum usuário existente\n    mockUserRepository.create.mockReturnValue(userEntity); // Simula a criação da entidade\n    mockUserRepository.save.mockResolvedValue(userEntity); // Simula o salvamento\n\n    // Act (Ação)\n    const result = await handler.execute(command);\n\n    // Assert (Verificação)\n    expect(result).toEqual({\n      message: 'Usuário criado com sucesso',\n      user: {\n        name: command.name,\n        email: command.email,\n        cpf: command.cpf,\n      },\n    });\n\n    expect(mockUserRepository.findOne).toHaveBeenCalledWith({\n      where: [{ email: command.email }, { cpf: command.cpf }],\n    });\n    expect(bcrypt.hash).toHaveBeenCalledWith(command.password, 10);\n    expect(mockUserRepository.create).toHaveBeenCalledWith({\n      ...command,\n      password: hashedPassword,\n    });\n    expect(mockUserRepository.save).toHaveBeenCalledWith(userEntity);\n  });\n\n  // Teste 2: Tentativa de criar um usuário que já existe\n  it('deve lançar uma BadRequestException se o email ou CPF já estiver em uso', async () => {\n    // Arrange\n    const command = new CreateUserCommand(\n      'Jane Doe',\n      'jane.doe@example.com',\n      '987.654.321-00',\n      '11988887777',\n      'uuid-address-456',\n      'AnotherStrongPass!',\n      'uuid-role-456',\n    );\n\n    const existingUser = new User(); // Simula um usuário já existente no banco\n\n    mockUserRepository.findOne.mockResolvedValue(existingUser);\n\n    // Act & Assert\n    await expect(handler.execute(command)).rejects.toThrow(\n      new BadRequestException(\n        'Email ou CPF já estão em uso. Por favor, tente novamente com outros dados.',\n      ),\n    );\n\n    // Garante que o processo foi interrompido antes de continuar\n    expect(bcrypt.hash).not.toHaveBeenCalled();\n    expect(mockUserRepository.create).not.toHaveBeenCalled();\n    expect(mockUserRepository.save).not.toHaveBeenCalled();\n  });\n\n  // Teste 3: Tratamento de um erro inesperado (ex: falha no banco)\n  it('deve lançar uma BadRequestException se ocorrer um erro durante o processo', async () => {\n    // Arrange\n    const command = new CreateUserCommand(\n      'Test Error',\n      'error@example.com',\n      '111.222.333-44',\n      '11977776666',\n      'uuid-address-789',\n      'ErrorPass123!',\n      'uuid-role-789',\n    );\n    const dbError = new Error('Erro de conexão com o banco de dados');\n\n    mockUserRepository.findOne.mockResolvedValue(null); // Usuário não existe\n    (bcrypt.hash as jest.Mock).mockResolvedValue('hashed');\n    mockUserRepository.create.mockReturnValue(new User());\n    mockUserRepository.save.mockRejectedValue(dbError); // Simula uma falha ao salvar\n\n    // Act & Assert\n    await expect(handler.execute(command)).rejects.toThrow(\n      new BadRequestException(dbError.message),\n    );\n  });\n});\n"},"src/test/user/listSpecificUser.handler.spec.ts":{"tests":[{"id":"3","name":"ListSpecificUserHandler should be defined","location":{"start":{"column":4,"line":52}}},{"id":"4","name":"ListSpecificUserHandler execute ✅ deve retornar um array com um usuário com sucesso","location":{"start":{"column":6,"line":59}}},{"id":"5","name":"ListSpecificUserHandler execute ❌ deve retornar um array vazio se o usuário não for encontrado","location":{"start":{"column":6,"line":82}}},{"id":"6","name":"ListSpecificUserHandler execute ❌ deve lançar uma BadRequestException se o repositório falhar","location":{"start":{"column":6,"line":98}}}],"source":"import { BadRequestException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { ListSpecificUserHandler } from 'src/application/handlers/user/listSpecificUser.handler';\nimport { ListSpecificUserQuery } from 'src/application/query/user/listSpecificUser.query';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n// Mock dos dados que esperamos que o repositório retorne\nconst mockUser: Partial<User>[] = [\n  {\n    name: 'João da Silva',\n    email: 'joao.silva@example.com',\n    phone: '11999998888',\n    isActive: true,\n  },\n  {\n    name: 'Maria Oliveira',\n    email: 'maria.oliveira@example.com',\n    phone: '21888887777',\n    isActive: true,\n  },\n];\n\ndescribe('ListSpecificUserHandler', () => {\n  let handler: ListSpecificUserHandler;\n  let userRepository: Repository<User>;\n\n  // Mock do repositório. Usamos 'find' pois é o método que o handler chama.\n  const mockUserRepository = {\n    find: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    // Limpa os mocks antes de cada teste para garantir a independência dos testes\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ListSpecificUserHandler,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository, // Usa o mock em vez do repositório real\n        },\n      ],\n    }).compile();\n\n    handler = module.get<ListSpecificUserHandler>(ListSpecificUserHandler);\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\n  });\n\n  it('should be defined', () => {\n    expect(handler).toBeDefined();\n    expect(userRepository).toBeDefined();\n  });\n\n  describe('execute', () => {\n    // --- HAPPY PATH ---\n    it('✅ deve retornar um array com um usuário com sucesso', async () => {\n      // Arrange: Configuração do cenário de teste\n      const query = new ListSpecificUserQuery('john.doe@example.com');\n      // Simula o repositório retornando a lista de usuários mockada com sucesso\n      mockUserRepository.find.mockResolvedValue(mockUser);\n\n      // Act: Execução do método a ser testado\n      const result = await handler.execute(query);\n\n      // Assert: Verificação do resultado\n      // 1. O resultado deve ser igual à nossa lista mockada\n      expect(result).toEqual(mockUser);\n      // 2. O método 'find' do repositório deve ter sido chamado uma vez\n      expect(mockUserRepository.find).toHaveBeenCalledTimes(1);\n      // 3. Verifica se 'find' foi chamado com os parâmetros corretos (select e relations)\n      expect(mockUserRepository.find).toHaveBeenCalledWith({\n        select: ['name', 'email', 'phone', 'isActive'],\n        relations: ['address', 'role'],\n        where: [{ email: 'john.doe@example.com' }],\n      });\n    });\n\n    // --- SAD PATH ---\n    it('❌ deve retornar um array vazio se o usuário não for encontrado', async () => {\n      const query = new ListSpecificUserQuery('non.existent.user@example.com');\n\n      mockUserRepository.find.mockResolvedValue([]);\n\n      const result = await handler.execute(query);\n\n      expect(result).toEqual([]);\n\n      expect(mockUserRepository.find).toHaveBeenCalledWith({\n        select: ['name', 'email', 'phone', 'isActive'],\n        relations: ['address', 'role'],\n        where: [{ email: 'non.existent.user@example.com' }],\n      });\n    });\n\n    it('❌ deve lançar uma BadRequestException se o repositório falhar', async () => {\n      // Arrange\n      const query = new ListSpecificUserQuery('any.email@example.com');\n      mockUserRepository.find.mockRejectedValue(new Error('Database error'));\n\n      // Act & Assert\n      await expect(handler.execute(query)).rejects.toThrow(\n        new BadRequestException('Erro ao buscar usuários'),\n      );\n      expect(mockUserRepository.find).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"},"src/test/user/updateUser.handler.spec.ts":{"tests":[{"id":"7","name":"UpdateUserHandler should be defined","location":{"start":{"column":4,"line":49}}},{"id":"8","name":"UpdateUserHandler execute ✅ deve retornar um objeto confirmando o update de um usuário com sucesso","location":{"start":{"column":6,"line":56}}},{"id":"9","name":"UpdateUserHandler execute ❌ deve lançar NotFoundException se o usuário não for encontrado","location":{"start":{"column":6,"line":85}}},{"id":"10","name":"UpdateUserHandler execute ❌ deve lançar BadRequestExecption se o usuário não for encontrado","location":{"start":{"column":6,"line":99}}}],"source":"import { BadRequestException, Logger, NotFoundException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { DeleteUserCommand } from 'src/application/commands/user/deleteUser.command';\nimport { UpdateUserCommand } from 'src/application/commands/user/updateUser.command';\nimport { DeleteUserHandler } from 'src/application/handlers/user/deleteUser.handler';\nimport { UpdateUserHandler } from 'src/application/handlers/user/updateUser.handler';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\nconst mockUser = {\n  name: 'João da Silva',\n  email: 'john.doe@example.com',\n  phone: '11999998888',\n  isActive: true,\n} as User;\n\nconst updateData = {\n  name: 'Lucas Dogo',\n  email: 'john1.doe@example.com',\n};\n\ndescribe('UpdateUserHandler', () => {\n  let handler: UpdateUserHandler;\n  let userRepository: Repository<User>;\n\n  const mockUserRepository = {\n    findOneBy: jest.fn(),\n    save: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UpdateUserHandler,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository,\n        },\n      ],\n    }).compile();\n\n    handler = module.get<UpdateUserHandler>(UpdateUserHandler);\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\n  });\n\n  it('should be defined', () => {\n    expect(handler).toBeDefined();\n    expect(userRepository).toBeDefined();\n  });\n\n  describe('execute', () => {\n    // --- HAPPY PATH ---\n    it('✅ deve retornar um objeto confirmando o update de um usuário com sucesso', async () => {\n      const command = new UpdateUserCommand('john.doe@example.com', updateData);\n\n      const updatedUser = {\n        ...mockUser,\n        ...updateData,\n      };\n\n      const expectedResult = {\n        message: 'Usuário atualizado com sucesso',\n        user: updatedUser,\n      };\n\n      mockUserRepository.findOneBy.mockResolvedValue(mockUser);\n      mockUserRepository.save.mockResolvedValue(updatedUser);\n\n      const result = await handler.execute(command);\n\n      expect(result).toEqual(expectedResult);\n\n      expect(mockUserRepository.findOneBy).toHaveBeenCalledTimes(1);\n      expect(mockUserRepository.findOneBy).toHaveBeenCalledWith({\n        email: command.email,\n      });\n\n      expect(mockUserRepository.save).toHaveBeenCalledTimes(1);\n      expect(mockUserRepository.save).toHaveBeenCalledWith(updatedUser);\n    });\n\n    it('❌ deve lançar NotFoundException se o usuário não for encontrado', async () => {\n      const command = new UpdateUserCommand(\n        'not.found@example.com',\n        updateData,\n      );\n\n      mockUserRepository.findOneBy.mockResolvedValue(null);\n\n      await expect(handler.execute(command)).rejects.toThrow(\n        new NotFoundException('Usuário não encontrado'),\n      );\n      expect(mockUserRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('❌ deve lançar BadRequestExecption se o usuário não for encontrado', async () => {\n      const command = new UpdateUserCommand('john.doe@example.com', updateData);\n\n      mockUserRepository.findOneBy.mockResolvedValue(mockUser);\n      mockUserRepository.save.mockRejectedValue(new Error('Database error'));\n\n      await expect(handler.execute(command)).rejects.toThrow(\n        new BadRequestException('Erro ao atualizar usuário'),\n      );\n    });\n  });\n});\n"},"src/test/user/getAllUsers.handler.spec.ts":{"tests":[{"id":"11","name":"GetAllUsersHandler should be defined","location":{"start":{"column":4,"line":51}}},{"id":"12","name":"GetAllUsersHandler execute ✅ deve retornar um array de usuários com sucesso","location":{"start":{"column":6,"line":58}}},{"id":"13","name":"GetAllUsersHandler execute ❌ deve lançar uma BadRequestException se o repositório falhar","location":{"start":{"column":6,"line":80}}}],"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { GetAllUsersHandler } from 'src/application/handlers/user/getAllUsers.handler';\nimport { GetAllUsersQuery } from 'src/application/query/user/getAllUsers.query';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\n// Mock dos dados que esperamos que o repositório retorne\nconst mockUsers: Partial<User>[] = [\n  {\n    name: 'João da Silva',\n    email: 'joao.silva@example.com',\n    phone: '11999998888',\n    isActive: true,\n  },\n  {\n    name: 'Maria Oliveira',\n    email: 'maria.oliveira@example.com',\n    phone: '21888887777',\n    isActive: true,\n  },\n];\n\ndescribe('GetAllUsersHandler', () => {\n  let handler: GetAllUsersHandler;\n  let userRepository: Repository<User>;\n\n  // Mock do repositório. Usamos 'find' pois é o método que o handler chama.\n  const mockUserRepository = {\n    find: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    // Limpa os mocks antes de cada teste para garantir a independência dos testes\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        GetAllUsersHandler,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository, // Usa o mock em vez do repositório real\n        },\n      ],\n    }).compile();\n\n    handler = module.get<GetAllUsersHandler>(GetAllUsersHandler);\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\n  });\n\n  it('should be defined', () => {\n    expect(handler).toBeDefined();\n    expect(userRepository).toBeDefined();\n  });\n\n  describe('execute', () => {\n    // --- HAPPY PATH ---\n    it('✅ deve retornar um array de usuários com sucesso', async () => {\n      // Arrange: Configuração do cenário de teste\n      const query = new GetAllUsersQuery();\n      // Simula o repositório retornando a lista de usuários mockada com sucesso\n      mockUserRepository.find.mockResolvedValue(mockUsers);\n\n      // Act: Execução do método a ser testado\n      const result = await handler.execute(query);\n\n      // Assert: Verificação do resultado\n      // 1. O resultado deve ser igual à nossa lista mockada\n      expect(result).toEqual(mockUsers);\n      // 2. O método 'find' do repositório deve ter sido chamado uma vez\n      expect(mockUserRepository.find).toHaveBeenCalledTimes(1);\n      // 3. Verifica se 'find' foi chamado com os parâmetros corretos (select e relations)\n      expect(mockUserRepository.find).toHaveBeenCalledWith({\n        select: ['id', 'name', 'email', 'phone', 'isActive'],\n        relations: ['address', 'role'],\n      });\n    });\n\n    // --- SAD PATH (Exemplo) ---\n    it('❌ deve lançar uma BadRequestException se o repositório falhar', async () => {\n      // Arrange\n      const query = new GetAllUsersQuery();\n      // Simula o repositório lançando um erro\n      mockUserRepository.find.mockRejectedValue(new Error('Database error'));\n\n      // Act & Assert\n      // Esperamos que a execução do handler rejeite e lance uma exceção específica\n      await expect(handler.execute(query)).rejects.toThrow(\n        'Erro ao buscar usuários',\n      );\n    });\n  });\n});\n"},"src/test/user/deleteUser.handler.spec.ts":{"tests":[{"id":"14","name":"DeleteUserHandler should be defined","location":{"start":{"column":4,"line":42}}},{"id":"15","name":"DeleteUserHandler execute ✅ deve retornar um objeto confirmando o delete de um usuário com sucesso","location":{"start":{"column":6,"line":49}}},{"id":"16","name":"DeleteUserHandler execute ❌ deve lançar NotFoundException se o usuário não for encontrado","location":{"start":{"column":6,"line":74}}},{"id":"17","name":"DeleteUserHandler execute ❌ deve lançar BadRequestExecption se o usuário não for encontrado","location":{"start":{"column":6,"line":85}}}],"source":"import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { DeleteUserCommand } from 'src/application/commands/user/deleteUser.command';\nimport { DeleteUserHandler } from 'src/application/handlers/user/deleteUser.handler';\nimport { User } from 'src/domain/entities/user.entity';\nimport { Repository } from 'typeorm';\n\nconst mockUser = {\n  name: 'João da Silva',\n  email: 'john.doe@example.com',\n  phone: '11999998888',\n  isActive: true,\n} as User;\n\ndescribe('DeleteUserHandler', () => {\n  let handler: DeleteUserHandler;\n  let userRepository: Repository<User>;\n\n  const mockUserRepository = {\n    findOneBy: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        DeleteUserHandler,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository,\n        },\n      ],\n    }).compile();\n\n    handler = module.get<DeleteUserHandler>(DeleteUserHandler);\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\n  });\n\n  it('should be defined', () => {\n    expect(handler).toBeDefined();\n    expect(userRepository).toBeDefined();\n  });\n\n  describe('execute', () => {\n    // --- HAPPY PATH ---\n    it('✅ deve retornar um objeto confirmando o delete de um usuário com sucesso', async () => {\n      const command = new DeleteUserCommand('john.doe@example.com');\n      const expectedResult = {\n        message: 'Usuário deletado com sucesso',\n        email: 'john.doe@example.com',\n      };\n\n      mockUserRepository.findOneBy.mockResolvedValue(mockUser);\n      mockUserRepository.delete.mockResolvedValue({});\n\n      const result = await handler.execute(command);\n\n      expect(result).toEqual(expectedResult);\n\n      expect(mockUserRepository.findOneBy).toHaveBeenCalledTimes(1);\n      expect(mockUserRepository.findOneBy).toHaveBeenCalledWith({\n        email: command.email,\n      });\n\n      expect(mockUserRepository.delete).toHaveBeenCalledTimes(1);\n      expect(mockUserRepository.delete).toHaveBeenCalledWith({\n        email: command.email,\n      });\n    });\n    // --- SAD PATH ---\n    it('❌ deve lançar NotFoundException se o usuário não for encontrado', async () => {\n      const command = new DeleteUserCommand('not.found@example.com');\n\n      mockUserRepository.findOneBy.mockResolvedValue(null);\n\n      await expect(handler.execute(command)).rejects.toThrow(\n        new NotFoundException('Usuário não encontrado'),\n      );\n      expect(mockUserRepository.delete).not.toHaveBeenCalled();\n    });\n\n    it('❌ deve lançar BadRequestExecption se o usuário não for encontrado', async () => {\n      const command = new DeleteUserCommand('john.doe@example.com');\n\n      mockUserRepository.findOneBy.mockResolvedValue(mockUser);\n      mockUserRepository.delete.mockRejectedValue(new Error('Database error'));\n\n      await expect(handler.execute(command)).rejects.toThrow(\n        new BadRequestException('Erro ao deletar usuário'),\n      );\n    });\n  });\n});\n"}},"projectRoot":"/home/lucas/Repositorios/senior-care","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","mutate":["src/**/*.ts","!src/**/*.spec.ts","!src/main.ts","!src/app.module.ts","!src/infrastructure/database/migrations/*.ts","!src/infrastructure/database/orm.config.ts"],"mutator":{"plugins":["@stryker-mutator/typescript"],"excludedMutations":[]},"testRunner":"jest","jest":{"projectType":"custom","config":{"rootDir":".","testEnvironment":"node","testRegex":".*\\.spec\\.ts$","transform":{"^.+\\.(t|j)s$":"ts-jest"},"moduleNameMapper":{"^src/(.*)$":"<rootDir>/src/$1"}},"enableFindRelatedTests":true},"reporters":["progress","html","clear-text","json"],"timeoutFactor":2.5,"thresholds":{"high":80,"low":60,"break":70},"concurrency":2,"tempDirName":".stryker-tmp","allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"cleanTempDir":true,"testRunnerNodeArgs":[],"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.0.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/jest-runner":"9.0.1","jest":"29.7.0","typescript":"5.8.3","webpack":"5.99.6","ts-jest":"29.3.2"}}}